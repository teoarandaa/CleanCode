[
	{
        "id": "EF1CC5BB-4785-4D8E-AB98-5FA4E00B6A66",
		"name": "Imperative Languages",
		"items": [
			{
                "id": "EDCD038C-036F-4C40-826F-61C88CD84DDD",
				"name": "C++",
				"miniDescription": "High-performance, object-oriented language.",
				"restrictions": ["D"],
                "ask1": "Follow style and naming conventions",
                "ask2": "Properly manage memory",
                "ask3": "Avoid the use of macros when possible",
                "ask4": "Efficient use of types and data structures",
                "ask5": "Modularization and code reuse",
                "ask6": "Follow object-oriented programming principles",
                "ask7": "Performance optimization and efficiency",
                "ask8": "Efficient use of templates",
                "ask9": "Efficient exception handling",
                "ask10": "Unit testing and debugging",
                "ask11": "Concurrency and parallelism",
                "ask12": "Resource optimizations",
                "ask13": "Security",
                "ask14": "Code documentation",
                "ask15": "Use of RAII (Resource Acquisition Is Initialization)",
                "ask16": "Proper use of std::unique_ptr and std::shared_ptr for pointer management",
                "q1": "Classes and structures:\nUse PascalCase for classes (class MyClass) and camelCase for members and methods (myVariable, myMethod()).",
                "q2": "Variables:\nUse camelCase for local variables and descriptive names. Avoid single-letter names unless in loops (i, j, etc.).",
                "q3": "Smart Pointers:\nUse smart pointers like std::unique_ptr, std::shared_ptr, and std::weak_ptr instead of raw pointers to manage memory more safely and automatically.",
                "q4": "RAII (Resource Acquisition Is Initialization):\nUse the RAII pattern to ensure resources are released when objects go out of scope.",
                "q5": "Prefer constants and inline functions:\nUse const, constexpr, or inline instead of macros for constants and functions.",
                "q6": "Proper use of #define:\nIf you need macros, use clear prefixes and ensure they are unique to avoid name collisions.",
                "q7": "Standard data structures:\nUse the Standard Template Library (STL) collections such as std::vector, std::list, std::map, etc., instead of implementing your own structures.",
                "q8": "STL Iterators and Algorithms:\nUse STL iterators and algorithms for operations on containers rather than writing manual loops.",
                "q9": "Separate declaration and definition:\nDefine functions and methods in .cpp files and declare classes and methods in .h files. This improves maintainability and code reuse.",
                "q10": "Inline functions and classes:\nUse inline for small functions that are frequently called, but don't overuse it as it may increase binary size.",
                "q11": "Proper inheritance:\nUse inheritance only when there is a clear 'is-a' relationship and employ polymorphism through base classes and virtual functions.",
                "q12": "Favor composition over inheritance:\nPrefer composition to inheritance whenever possible. It's better to have classes collaborate than to create complex inheritance hierarchies.",
                "q13": "Avoid unnecessary copies:\nUse references or pointers instead of passing large objects by value.",
                "q14": "Move resources instead of copying:\nUse move semantics instead of copying when possible. Implement move constructors and operators if your classes handle resources.",
                "q15": "Function and class templates:\nUse templates to create generic, reusable code. Templates allow you to write functions and classes that work with different data types.",
                "q16": "Specialized templates:\nWhen you need specific behavior for certain types, you can specialize templates.",
                "q17": "Specific exceptions:\nUse specific exceptions instead of catching all exceptions. Don’t use exceptions to control normal program flow.",
                "q18": "Avoid new and delete in common code:\nPrefer using smart pointers or functions that automatically manage memory to avoid the overhead of manual memory handling in general code.",
                "q19": "Unit tests:\nImplement unit tests with tools like Google Test or Catch2. Ensure that you test edge cases and common usage scenarios.",
                "q20": "Use assert:\nUse assert to check invariants or conditions that should not fail during normal program execution.",
                "q21": "C++ Threads:\nUse the standard thread library (<thread>) to manage concurrent tasks.",
                "q22": "Futures and promises:\nUse std::future and std::promise to handle asynchronous results instead of relying solely on direct threads.",
                "q23": "Resource release:\nUse std::unique_ptr or std::shared_ptr to ensure automatic release of memory and resources when no longer needed.",
                "q24": "Use the Rule of Five:\nIf you implement one of the following: destructor, copy constructor, copy assignment, move constructor, or move assignment, implement all five to avoid resource handling errors.",
                "q25": "Input validation:\nAlways validate user input to avoid security issues such as buffer overflows or injections.",
                "q26": "Avoid unsafe functions:\nReplace legacy C functions, such as strcpy, sprintf, with safer versions like strncpy and snprintf.",
                "q27": "Code comments:\nUse comments to describe the intention behind complex code blocks or non-trivial functions. Avoid redundant comments or those that describe the obvious.",
                "q28": "Doxygen documentation:\nUse tools like Doxygen to automatically generate documentation from structured comments in the code.",
                "q29": "Automatic resource management:\nThe RAII pattern ensures that resources (memory, files, connections) are released automatically when an object goes out of scope. Use constructors and destructors to manage resource acquisition and release.",
                "q30": "Avoid resource leaks:\nRAII allows destructors to handle resource release, eliminating the need to manually manage it and reducing memory leaks or improperly released resources.",
                "q31": "Smart pointers for automatic memory management:\nUse std::unique_ptr when only one object should own a resource, and std::shared_ptr when multiple objects need to share ownership of a resource. This improves memory management and prevents leaks.",
                "q32": "Error prevention with raw pointers:\nSmart pointers (std::unique_ptr and std::shared_ptr) eliminate the need to manually release memory, reducing the risk of leaks and other errors associated with raw pointers.",
                "code1": "class MyClass {\npublic:\n    int myVariable;\n\n    void myMethod() {\n        // Method logic\n        myVariable += 10;\n    }\n};\n\n// Usage\nMyClass example;\nexample.myVariable = 5;\nexample.myMethod();",
                "code2": "void calculateSum(int maxValue) {\n    int totalSum = 0;\n    \n    // Loop from 0 to maxValue - 1\n    for (int i = 0; i < maxValue; i++) {\n        totalSum += i;\n    }\n    \n    // Output the total sum\n    std::cout << \"The total sum is: \" << totalSum << std::endl;\n}\n\n// Usage\ncalculateSum(10);",
                "code3": "std::unique_ptr<MyClass> obj = std::make_unique<MyClass>();",
                "code4": "std::ifstream file(\"file.txt\");  // The file is automatically closed when exiting the scope",
                "code5": "constexpr int MAX = 100;\ninline int add(int a, int b) { return a + b; }",
                "code6": "#include <iostream>\n\n#define MAX_BUFFER_SIZE 1024  // Maximum buffer size\n#define APP_VERSION \"1.0.0\"   // Application version\n\n// Usage\nint main() {\n    char buffer[MAX_BUFFER_SIZE];  // Define a buffer with the max size\n    std::cout << \"Application version: \" << APP_VERSION << std::endl;  // Print the application version\n\n    return 0;\n}",
                "code7": "#include <vector>\n#include <iostream>\n\nint main() {\n    // Define a vector with some numbers\n    std::vector<int> numbers = {1, 2, 3, 4, 5};\n    \n    // Iterate over the vector and print the numbers\n    for (int number : numbers) {\n        std::cout << number << \" \";  // Print each number followed by a space\n    }\n\n    return 0;  // End the program\n}",
                "code8": "std::vector<int> v = {1, 2, 3};\nstd::for_each(v.begin(), v.end(), [](int &n) { n *= 2; });",
                "code9": "// MyClass.h - Declaration\n#ifndef MYCLASS_H\n#define MYCLASS_H\n\nclass MyClass {\npublic:\n    void showMessage();\n};\n\n#endif // MYCLASS_H\n\n// ---\n\n// MyClass.cpp - Definition\n#include <iostream>\n#include \"MyClass.h\"\n\nvoid MyClass::showMessage() {\n    std::cout << \"Hello from MyClass!\" << std::endl;\n}",
                "code10": "// MyClass.h\n#ifndef MYCLASS_H\n#define MYCLASS_H\n\nclass MyClass {\npublic:\n    inline void printMessage() {\n        // Inline function to improve performance on frequent calls\n        std::cout << \"Inline message.\" << std::endl;\n    }\n};\n\n#endif // MYCLASS_H",
                "code11": "class Animal {\npublic:  \n    virtual void makeSound() = 0;  // Pure virtual method (interface)\n};\n\nclass Dog : public Animal {\npublic:  \n    void makeSound() override { std::cout << \"Woof\" << std::endl; }\n};",
                "code12": "#include <iostream>\n\nclass Engine {\npublic:\n    void start() { std::cout << \"Engine started\\n\"; }\n};\n\nclass Car {\n    Engine engine;  // Composition\npublic:\n    void start() { engine.start(); }\n};\n\nint main() {\n    Car car1;\n    car1.start();\n    return 0;\n}",
                "code13": "void processData(const MyClass &obj);  // Use reference instead of copying the object",
                "code14": "std::vector<int> v = {1, 2, 3};\nstd::vector<int> v2 = std::move(v); // Move instead of copy",
                "code15": "template <typename T>\nT maximum(T a, T b) {  \n    return (a > b) ? a : b;\n}",
                "code16": "template <>\nconst char* maximum<const char*>(const char* a, const char* b) {  \n    return (strcmp(a, b) > 0) ? a : b;\n}",
                "code17": "try {  \n    throw std::runtime_error(\"Error in the program\");\n} catch (const std::runtime_error &e) {  \n    std::cerr << \"Caught exception: \" << e.what() << std::endl;\n}",
                "code18": "#include <iostream>\n#include <memory>\n\nclass Person {\npublic:\n    void greet() { std::cout << \"Hello!\\n\"; }\n};\n\nint main() {\n    std::unique_ptr<Person> person = std::make_unique<Person>();\n    person->greet();\n    return 0;\n}",
                "code19": "#include <gtest/gtest.h>\n#include \"MyClass.h\"\n\nTEST(MyClassTest, ExampleMethod) {\n    MyClass object;\n    EXPECT_EQ(object.exampleMethod(), 42);\n}\n\nint main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}",
                "code20": "assert(x > 0 && \"x must be positive\");",
                "code21": "std::thread thread1(function);\nthread1.join();",
                "code22": "std::future<int> result = std::async(std::launch::async, []() { return 42; });",
                "code23": "#include <memory>\n#include <iostream>\n\nclass Resource {\npublic:\n    Resource() { std::cout << \"Resource acquired.\\n\"; }\n    ~Resource() { std::cout << \"Resource released.\\n\"; }\n};\n\nvoid manageResource() {\n    std::unique_ptr<Resource> resource(new Resource());\n    // The resource is automatically released when going out of scope\n}\n\nint main() {\n    manageResource();\n    return 0;\n}",
                "code24": "class MyClass {\npublic:  \n    MyClass() = default;  \n    ~MyClass();  \n    MyClass(const MyClass&); // Copy constructor  \n    MyClass& operator=(const MyClass&); // Copy assignment  \n    MyClass(MyClass&&) noexcept; // Move constructor  \n    MyClass& operator=(MyClass&&) noexcept; // Move assignment\n};",
                "code25": "#include <iostream>\n#include <string>\n\nbool validateInput(const std::string& input) {\n    return !input.empty() && input.length() < 100; // Limit the length\n}\n\nint main() {\n    std::string input;\n    std::cout << \"Enter a text (max 99 characters): \";\n    std::getline(std::cin, input);\n\n    if (validateInput(input)) {\n        std::cout << \"Valid input: \" << input << std::endl;\n    } else {\n        std::cout << \"Invalid input.\\n\";\n    }\n    return 0;\n}",
                "code26": "#include <iostream>\n#include <cstring>\n\nint main() {\n    const char* message = \"Hello, world!\";\n    char buffer[50];\n\n    // Use strncpy to avoid buffer overflows\n    strncpy(buffer, message, sizeof(buffer) - 1);\n    buffer[sizeof(buffer) - 1] = '\\0'; // Ensure the buffer is null-terminated\n\n    std::cout << \"Message: \" << buffer << std::endl;\n\n    return 0;\n}",
                "code27": "#include <iostream>\n\n// Function that calculates the factorial of a number\nint factorial(int n) {\n    if (n <= 1) return 1; // Base case: factorial of 0 or 1 is 1\n\n    // Recursively call the function to calculate the factorial\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int number = 5;\n    std::cout << \"The factorial of \" << number << \" is \" << factorial(number) << std::endl;\n\n    return 0;\n}",
                "code28": "/**\n * @brief Calculates the factorial of a number.\n *\n * This function takes a non-negative integer and returns its factorial.\n *\n * @param n The number to calculate the factorial of.\n * @return The factorial of n.\n */\nint factorial(int n) {\n    if (n <= 1) return 1; // Base case: factorial of 0 or 1 is 1\n    return n * factorial(n - 1); // Recursive call\n}",
                "code29": "#include <iostream>\n\nclass Resource {\npublic:\n    Resource() { std::cout << \"Resource acquired.\" << std::endl; }\n    ~Resource() { std::cout << \"Resource released.\" << std::endl; }\n};\n\nint main() {\n    {\n        Resource res; // Resource acquired\n    } // Resource automatically released when going out of scope\n\n    return 0;\n}",
                "code30": "#include <iostream>\n#include <memory>\n\nclass Resource {\npublic:\n    Resource() { std::cout << \"Resource acquired.\\n\"; }\n    ~Resource() { std::cout << \"Resource released.\\n\"; }\n};\n\nvoid useResource() {\n    std::unique_ptr<Resource> resource = std::make_unique<Resource>();\n    // The resource will be automatically released when going out of scope\n}\n\nint main() {\n    useResource(); // When finished, the destructor is called automatically\n    return 0;\n}",
                "code31": "#include <iostream>\n#include <memory>\n\nclass Resource {\npublic:\n    Resource() { std::cout << \"Resource acquired\" << std::endl; }\n    ~Resource() { std::cout << \"Resource released\" << std::endl; }\n};\n\nint main() {\n    std::unique_ptr<Resource> ptr = std::make_unique<Resource>();\n    // You don't need to manually release the resource; it will be released when ptr goes out of scope\n}",
                "code32": "#include <iostream>\n#include <memory>\n\nclass Object {\npublic:\n    Object() { std::cout << \"Object created.\\n\"; }\n    ~Object() { std::cout << \"Object destroyed.\\n\"; }\n};\n\nvoid manageObject() {\n    std::unique_ptr<Object> object = std::make_unique<Object>();\n    // No need to manually release memory\n}\n\nint main() {\n    manageObject(); // The object is automatically destroyed\n    return 0;\n}"
			},
			{
                "id": "36A7CC40-18C1-48E5-BCD8-3B42D43BEAEE",
				"name": "Golang",
                "miniDescription": "Efficient, concurrent, for scalable applications.",
				"restrictions": ["I", "D"],
                "ask1": "Simplicity and clarity",
                "ask2": "Use of go fmt and style standards",
                "ask3": "Explicit error handling",
                "ask4": "Efficient concurrency handling with goroutines and channels",
                "ask5": "Small and useful interfaces",
                "ask6": "Proper use of pointers",
                "ask7": "Avoid unnecessary use of nil",
                "ask8": "Avoid excessive use of global variables",
                "ask9": "Efficient use of collections and maps",
                "ask10": "Testing with go test",
                "ask11": "Proper use of defer",
                "ask12": "Efficient use of slices",
                "ask13": "Package documentation",
                "ask14": "Memory usage optimization",
                "ask15": "Avoid panic unless necessary",
                "ask16": "Avoid panic unless absolutely necessary",
                "q1": "Keep code simple and clear:\nGo is designed to be simple. Avoid complex design patterns or advanced features that could make the code harder to understand. Simple, readable code is preferred over elegant but complicated code.",
                "q2": "Errors as values:\nIn Go, errors are handled explicitly, which promotes clarity in the code. By returning errors as values, you force developers to consider potential problems and address them appropriately.",
                "q3": "Code formatting:\nUse go fmt to consistently format your code according to the language standards. This ensures that all code is readable and uniform, no matter who writes it.",
                "q4": "Automatic formatting:\nThe go fmt tool automatically applies style standards to your code, promoting consistency and readability in Go projects.",
                "q5": "Don't use exceptions:\nGo doesn't have exceptions like other languages (Java, Python). Instead, error handling is done explicitly by returning an error value and checking it.",
                "q6": "Error checking:\nGo requires each function to handle its errors explicitly, which improves code clarity and reliability.",
                "q7": "Goroutines:\nGo has built-in concurrency with goroutines, which allow functions to be executed simultaneously in an efficient manner. They are lighter than traditional threads.",
                "q8": "Channels:\nUse channels for safe communication between goroutines. Channels help avoid race conditions by synchronizing data access.",
                "q9": "Simple interfaces:\nDefine small interfaces with a specific purpose. Avoid designing large or 'fat' interfaces that do not fit many uses.",
                "q10": "Code decoupling:\nSmall interfaces allow functions to work with any type that implements the interface, promoting a more modular and flexible design.",
                "q11": "Pointers for large structures or mutability:\nUse pointers when you need to modify the original values of a variable or when working with large structures to avoid expensive copies.",
                "q12": "Efficiency in data manipulation:\nPointers allow you to pass references to data without copying the information, which improves performance, especially with large structures.",
                "q13": "Careful handling of nil:\nEnsure that you properly handle nil values. Do not access fields or methods of nil values without checking them first, as it can cause a runtime panic.",
                "q14": "Clear error handling:\nInstead of relying on nil to indicate the absence of a value, it is better to use default values ​​or error types for more explicit and safe handling.",
                "q15": "Avoid global variables:\nGlobal variables can cause issues in concurrent programs and make code harder to maintain. It's better to encapsulate state within structures or pass it as parameters.",
                "q16": "Encapsulation:\nUsing local variables or structures to maintain state improves the readability and maintainability of the code.",
                "q17": "Maps:\nUse maps for key-value pairs and arrays ([]) for ordered sequences. Maps in Go are efficient and useful, but keep in mind that they are not concurrency-safe without additional protection.",
                "q18": "Search and storage optimization:\nUse maps to access data quickly and efficiently, and choose the appropriate collections based on the use case to improve performance.",
                "q19": "Write unit tests:\nUse go test to write and run unit tests. Go has built-in support for testing, making it easy to create tests without external tools.",
                "q20": "Test coverage:\nUse go test -cover to view the code coverage in your tests.",
                "q21": "Defer for resource release:\nUse defer to ensure that resources like files, connections, or locks are properly released after use. Code marked with defer runs at the end of the function.",
                "q22": "Error handling:\nUse defer to log errors or perform final actions on functions, ensuring that they execute independently of program flow.",
                "q23": "Dynamic slices:\nUse slices instead of arrays when you need a dynamic size. Slices provide a flexible, dynamic view of a portion of an array.",
                "q24": "Capacity and length:\nTake advantage of the capacity of slices to avoid the unnecessary creation of new slices and improve performance. Use the append function wisely and keep capacity in mind when creating slices.",
                "q25": "Comments for documentation:\nUse comments to document functions, structures, and packages. Comments that begin with the function or type name can be automatically turned into documentation with godoc.",
                "q26": "Clear and concise comments:\nUse comments to document the purpose of functions, types and variables. This makes the code easier to understand and improves its maintainability.",
                "q27": "Modularization with packages:\nSplit your code into packages (package) for better organization and reusability. Use descriptive names for the packages and their functions.",
                "q28": "Meaningful package names:\nAssign descriptive and meaningful names to packages. This helps other developers quickly understand the functionality of the package and its purpose in the project.",
                "q29": "Memory usage efficiency:\nGo has a garbage collector, but it's important to optimize memory usage where possible. Avoid creating large structures in functions that run often or in goroutines that run concurrently.",
                "q30": "Avoid unnecessary copies:\nUse pointers when necessary to avoid copying large structures or data in functions.",
                "q31": "Avoid panic and recover unless absolutely necessary:\nGo allows you to throw errors with panic, but it should only be used in exceptional situations (such as unrecoverable errors). To handle errors safely, return error and use recover only when truly necessary.",
                "q32": "Use error handling:\nUse the error handling pattern instead of panic for situations that can be managed. This allows for a more predictable flow of control and prevents your application from closing unexpectedly.",
                "code1": "func sum(a int, b int) int {\n    return a + b\n}",
                "code2": "package main\n\nimport (\n    \"fmt\"\n    \"errors\"\n)\n\nfunc divide(a, b float64) (float64, error) {\n    if b == 0 {\n        return 0, errors.New(\"division by zero\")\n    }\n    return a / b, nil\n}\n\nfunc main() {\n    _, err := divide(10, 0)\n    if err != nil {\n        fmt.Println(err) // Error: division by zero\n    }\n}",
                "code3": "go fmt myfile.go",
                "code4": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world!\") // Code formatted with go fmt\n}",
                "code5": "func readFile(name string) ([]byte, error) {  \n    content, err := os.ReadFile(name)  \n    if err != nil {  \n        return nil, err  \n    }  \n    return content, nil\n}\n\ncontent, err := readFile(\"data.txt\")\nif err != nil {   \n    log.Fatal(err)\n}\nfmt.Println(string(content))",
                "code6": "package main\n\nimport (\n    \"fmt\"\n    \"errors\"\n)\n\nfunc calculateSquareRoot(number float64) (float64, error) {\n    if number < 0 {\n        return 0, errors.New(\"cannot calculate the square root of a negative number\")\n    }\n    return number * number, nil\n}\n\nfunc main() {\n    _, err := calculateSquareRoot(-9) // Error calculating square root\n    if err != nil {\n        fmt.Println(\"Error:\", err) // Error: cannot calculate the square root of a negative number\n    }\n}",
                "code7": "func greet() {  \n    fmt.Println(\"Hello!\")\n}\n\nfunc main() {  \n    go greet() // This runs concurrently  \n    fmt.Println(\"World!\")  \n    time.Sleep(1 * time.Second) // Waits one second to see both messages\n}",
                "code8": "func sendMessage(channel chan string) {  \n    channel <- \"Hello from the goroutine\"\n}\n\nfunc main() {  \n    channel := make(chan string)  \n    go sendMessage(channel)  \n    message := <-channel  \n    fmt.Println(message)\n}",
                "code9": "type Reader interface {  \n    Read(p []byte) (n int, err error)\n}\n\nfunc readSomething(r Reader) {  \n    buffer := make([]byte, 100)  \n    r.Read(buffer)  \n    fmt.Println(string(buffer))\n}",
                "code10": "package main\n\nimport \"fmt\"\n\ntype Speaker interface {\n    Speak() string\n}\n\ntype Cat struct{}\n\nfunc (Cat) Speak() string {\n    return \"Meow\"\n}\n\nfunc greet(s Speaker) {\n    fmt.Println(s.Speak())\n}\n\nfunc main() {\n    greet(Cat{}) // Output: Meow\n}",
                "code11": "func increment(value *int) {  \n    *value += 1\n}\n\nfunc main() {  \n    number := 5  \n    increment(&number)  \n    fmt.Println(number) // Prints 6\n}",
                "code12": "package main\n\nimport \"fmt\"\n\ntype Person struct {\n    Name string\n}\n\nfunc changeName(p *Person) {\n    p.Name = \"John\"\n}\n\nfunc main() {\n    person := Person{Name: \"Carlos\"}\n    changeName(&person)\n    fmt.Println(person.Name) // Output: John\n}",
                "code13": "func printMessage(message *string) {  \n    if message == nil {  \n        fmt.Println(\"No message to display.\")  \n        return  \n    }  \n    fmt.Println(*message)\n}\n\nfunc main() {  \n    var message *string  \n    printMessage(message)\n}",
                "code14": "package main\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc divide(a, b int) (int, error) {\n    if b == 0 {\n        return 0, errors.New(\"division by zero\")\n    }\n    return a / b, nil\n}\n\nfunc main() {\n    _, err := divide(10, 0)\n    fmt.Println(err) // Output: division by zero\n}",
                "code15": "type Counter struct {  \n    value int\n}\n\nfunc (c *Counter) increment() {  \n    c.value++\n}\n\nfunc main() {  \n    counter := Counter{value: 0}  \n    counter.increment()  \n    fmt.Println(counter.value)\n}",
                "code16": "package main\n\nimport \"fmt\"\n\ntype Counter struct {\n    value int\n}\n\nfunc (c *Counter) increment() {\n    c.value++\n}\n\nfunc main() {\n    counter := Counter{}\n    for i := 0; i < 5; i++ {\n        counter.increment()\n    }\n    fmt.Println(counter.value) // Output: 5\n}",
                "code17": "func main() {  \n    ages := map[string]int{  \n        \"Juan\":  30,  \n        \"María\": 25,  \n    }  \n    fmt.Println(ages[\"Juan\"]) // Prints 30\n}",
                "code18": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Using a map to count occurrences\n    fruits := []string{\"apple\", \"banana\", \"apple\", \"orange\"}\n    count := make(map[string]int)\n\n    for _, fruit := range fruits {\n        count[fruit]++\n    }\n\n    fmt.Println(count) // Output: map[banana:1 apple:2 orange:1]\n}",
                "code19": "func Sum(a, b int) int {  \n    return a + b\n}\n\n// file sum_test.go\nfunc TestSum(t *testing.T) {  \n    result := Sum(2, 3)  \n    if result != 5 {  \n        t.Errorf(\"Expected 5, but got %d\", result)  \n    }\n}\n",
                "code20": "go test -cover",
                "code21": "func readFile(name string) {  \n    file, err := os.Open(name)  \n    if err != nil {  \n        log.Fatal(err)  \n    }  \n    defer file.Close()\n  \n    // Use the file\n}",
                "code22": "package main\n\nimport \"fmt\"\n\nfunc processData(data int) {\n    defer fmt.Printf(\"Processing data: %d\\n\", data) // Executed at the end of the function\n\n    if data < 0 {\n        fmt.Println(\"Error: negative data\")\n        return\n    }\n\n    // Simulating processing\n    fmt.Println(\"Data processed successfully\")\n}\n\nfunc main() {\n    processData(10)  // Output: Data processed successfully\n    processData(-5)  // Output: Error: negative data\n                     //         Processing data: -5\n}",
                "code23": "func main() {  \n    numbers := []int{1, 2, 3}  \n    numbers = append(numbers, 4)  \n    fmt.Println(numbers) // Prints [1 2 3 4]\n}",
                "code24": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    // Create a slice with initial capacity\n    numbers := make([]int, 0, 5) // Initial capacity of 5\n\n    // Add elements using append\n    for i := 0; i < 10; i++ {\n        numbers = append(numbers, i)\n    }\n\n    fmt.Println(numbers)             // Output: [0 1 2 3 4 5 6 7 8 9]\n    fmt.Println(\"Length:\", len(numbers)) // Length: 10\n    fmt.Println(\"Capacity:\", cap(numbers)) // Capacity: 10\n}",
                "code25": "// Add sums two integers and returns the result.\nfunc Add(a, b int) int {  \n    return a + b\n}",
                "code26": "package main\n\nimport \"fmt\"\n\n// Add returns the sum of two integers.\nfunc Add(a int, b int) int {\n    return a + b\n}\n\n// main is the main function of the program.\nfunc main() {\n    result := Add(3, 5) // Add 3 and 5\n    fmt.Println(\"Result:\", result) // Output: Result: 8\n}",
                "code27": "// file in utilities package\npackage utilities\n\nfunc Add(a, b int) int {  \n    return a + b\n}\n\n// main file\npackage main\n\nimport (  \n    \"fmt\"  \n    \"myapp/utilities\"\n)\n\nfunc main() {  \n    result := utilities.Add(2, 3)  \n    fmt.Println(result) // Prints 5\n}",
                "code28": "// file: calculator/calculator.go\npackage calculator // Package name related to mathematical operations\n\n// Multiply returns the product of two integers.\nfunc Multiply(a int, b int) int {\n    return a * b\n}\n\n// file: main.go\npackage main\n\nimport (\n    \"fmt\"\n    \"path/to/your/package/calculator\" // Import the calculator package\n)\n\nfunc main() {\n    result := calculator.Multiply(4, 5) // Call the Multiply function\n    fmt.Println(\"Result:\", result)       // Output: Result: 20\n}",
                "code29": "package main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nfunc main() {\n    var wg sync.WaitGroup\n    wg.Add(5)\n\n    for i := 0; i < 5; i++ {\n        go func() {\n            defer wg.Done()\n            fmt.Println(\"Processing...\")\n        }()\n    }\n\n    wg.Wait()\n}",
                "code30": "package main\n\nimport (\n    \"fmt\"\n)\n\ntype LargeStruct struct {\n    Data [1024]byte\n}\n\nfunc process(data *LargeStruct) {\n    fmt.Println(\"Processing data...\")\n}\n\nfunc main() {\n    largeData := LargeStruct{} // Create an instance\n\n    // Pass the address to avoid copying\n    process(&largeData)\n}",
                "code31": "func divide(a, b int) (int, error) {  \n    if b == 0 {  \n        return 0, errors.New(\"division by zero\")  \n    }  \n    return a / b, nil\n}",
                "code32": "package main\n\nimport (\n    \"fmt\"\n)\n\n// GetElement returns the element at the specified position, or an error if it's out of range.\nfunc GetElement(s []int, index int) (int, error) {\n    if index < 0 || index >= len(s) {\n        return 0, fmt.Errorf(\"index out of range\")\n    }\n    return s[index], nil\n}\n\nfunc main() {\n    elements := []int{1, 2, 3}\n    if _, err := GetElement(elements, 5); err != nil {\n        fmt.Println(\"Error:\", err) // Error handling\n    }\n}"
			},
			{
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
				"name": "Python",
                "miniDescription": "Versatile, easy, and multipurpose language.",
				"restrictions": ["E"],
                "ask1": "Follow The Python Philosophy (Zen Of Python)",
                "ask2": "Code Readability",
                "ask3": "Follow PEP 8 (Python style guide)",
                "ask4": "Proper use of variables and data types",
                "ask5": "Proper use of functions",
                "ask6": "Avoid repeated code (DRY - Don’t Repeat Yourself)",
                "ask7": "Efficient exception handling",
                "ask8": "List comprehensions and generators",
                "ask9": "Efficient file and resource management",
                "ask10": "Testing and debugging",
                "ask11": "Dependency management",
                "ask12": "Performance optimization",
                "ask13": "Project documentation",
                "ask14": "Follow conventions",
                "ask15": "Security",
                "ask16": "Concurrency and parallelism management",
                "q1": "Python has its own philosophy called the Zen of Python, which contains important guidelines for writing quality Python code. Some of the most notable principles are:\n\n- Readability counts\n- Explicit is better than implicit\n- Simple is better than complex\n- Exceptions should not pass silently (unless they are handled).\n\nYou can see these principles by typing 'import this' in the Python console.",
                "q2": "Helpful comments:\nComment only where necessary to explain why something is done, not what the code does.",
                "q3": "Use descriptive names:\nAssign clear and meaningful names to variables, functions, classes, and modules. Avoid cryptic abbreviations.",
                "q4": "Useful comments:\nComment only where necessary to explain the why of something, not the what the code does.",
                "q5": "Indentation:\nUse 4 spaces per indentation level. Do not use tabs.",
                "q6": "Spacing around operators:\nLeave a space around operators (=, +, -, etc.) to improve readability.",
                "q7": "Dynamic typing and optional static typing:\nAlthough Python is dynamically typed, you can use type hints to specify expected types in functions and variables, which improves clarity and eases maintenance.",
                "q8": "Efficient collection handling:\nUse the appropriate data structures (list, set, dict, tuple) as needed to optimize performance and code clarity.",
                "q9": "Small and focused functions:\nEach function should have a single responsibility (Single Responsibility Principle). Avoid large, monolithic functions.",
                "q10": "Use default parameters and keyword arguments:\nUse default values and named arguments to improve the flexibility and clarity of functions.",
                "q11": "Modularization:\nBreak the code into reusable functions and modules to avoid logic duplication.",
                "q12": "Use of classes and inheritance:\nUtilize object-oriented programming when appropriate to encapsulate behavior and avoid code repetition.",
                "q13": "Use try-except to handle errors:\nAlways handle potential errors with try-except blocks. Avoid letting exceptions go unnoticed.",
                "q14": "Use finally for cleanup:\nIf you have code that needs to run regardless of whether an exception occurs, place it in a finally block.",
                "q15": "List comprehensions:\nUse list comprehensions to create new lists concisely and efficiently.",
                "q16": "Generators:\nUse generators (yield) to handle large amounts of data more efficiently without loading everything into memory.",
                "q17": "Use with to handle files:\nUse the with statement to open files and ensure they are properly closed.",
                "q18": "Context managers:\nCreate your own context managers when you need to ensure that certain resources are properly released after use.",
                "q19": "Unit tests:\nUse the unittest module or frameworks like pytest to create unit tests that ensure your code works correctly.",
                "q20": "Debugging:\nUse pdb or built-in debugging tools in your code editor (like PyCharm or VSCode) to trace errors efficiently.",
                "q21": "Virtual environments:\nUse virtualenv or venv to isolate dependencies for each project. This prevents conflicts between library versions.",
                "q22": "Requirements files or Pipfile:\nDocument project dependencies in a requirements.txt file or use Pipenv to manage dependencies efficiently.",
                "q23": "Avoid nested loops and inefficient code:\nTry to reduce the temporal and spatial complexity of your code. Use Python's native functions, such as map, filter, and reduce, when possible.",
                "q24": "Profile the code:\nUse tools like cProfile or timeit to analyze the performance of your code and identify bottlenecks.",
                "q25": "Document your project with README and docstrings:\nUse a README.md file to describe the purpose of the project, installation and usage instructions. Additionally, document your modules and functions using docstrings.",
                "q26": "Generate automatic documentation:\nUse tools like Sphinx to generate HTML documentation from docstrings.",
                "q27": "Style conventions and linting tools:\nUse linters like pylint or flake8 to ensure your code adheres to style conventions and is free from potential errors.",
                "q28": "Code formatters:\nUse tools like black or autopep8 to automatically format your code according to PEP 8.",
                "q29": "Avoid the use of dangerous dynamic code:\nDo not use eval() or exec() unless absolutely necessary, as they can be vulnerable to attacks.",
                "q30": "Escape user inputs:\nAlways validate and escape user inputs, especially in web applications, to prevent attacks such as code injection.",
                "q31": "Use asyncio and concurrent.futures when necessary:\nTo improve performance in programs that require intensive input/output operations or when you need to handle multiple tasks at once, use asyncio for asynchronous programming or concurrent.futures for parallelism.",
                "q32": "Avoid blocking the main thread:\nProper use of these mechanisms allows your code to be more efficient without blocking the main flow of the program, improving performance in applications with many concurrent requests, such as web servers.",
                "code1": "def calculate_rectangle_area(base, height):\n    \"\"\"Calculates the area of a rectangle.\"\"\"\n    return base * height\n\n# Using the function with explicit names\nbase = 5\nheight = 3\narea = calculate_rectangle_area(base, height)\n\nprint(f\"The area of the rectangle is: {area}\")  # Output: The area of the rectangle is: 15",
                "code2": "def divide(a, b):\n    \"\"\"Divides two numbers and handles the exception if b is zero.\"\"\"\n    if b == 0:\n        raise ValueError(\"Error: Cannot divide by zero.\")\n    return a / b\n\n# Using the function\ntry:\n    result = divide(10, 0)  # Attempting to divide by zero\nexcept ValueError as e:\n    print(e)  # Output: Error: Cannot divide by zero.\nelse:\n    print(f\"Result: {result}\")",
                "code3": "# Descriptive name\ndef calculate_rectangle_area(width, height):\n    return width * height",
                "code4": "def calculate_rectangle_area(width, height):\n    \"\"\"\n    Calculates the area of a rectangle.\n    \n    :param width: Width of the rectangle.\n    :param height: Height of the rectangle.\n    :return: Area of the rectangle.\n    \"\"\"\n    return width * height",
                "code5": "def my_function():\n    x = 10\n    y = 20\n    return x + y",
                "code6": "sum = a + b\nproduct = a * b",
                "code7": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
                "code8": "# Use set for unique values\nunique_values = set([1, 2, 2, 3, 4])",
                "code9": "def calculate_circle_area(radius):\n    return 3.14159 * radius ** 2",
                "code10": "def greet(name=\"World\"):\n    print(f\"Hello, {name}\")",
                "code11": "# File: operations.py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\n# Main file\nfrom operations import add, subtract\n\nresult = add(5, 3)",
                "code12": "class Animal:\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Woof\"",
                "code13": "try:\n    x = int(input(\"Enter a number: \"))\nexcept ValueError:\n    print(\"That's not a valid number.\")",
                "code14": "try:\n    file = open('file.txt', 'r')\n    content = file.read()\nfinally:\n    file.close()",
                "code15": "squares = [x**2 for x in range(10)]",
                "code16": "def count_up_to(max):\n    count = 1\n    while count <= max:\n        yield count\n        count += 1",
                "code17": "with open('file.txt', 'r') as file:\n    content = file.read()",
                "code18": "from contextlib import contextmanager\n\n@contextmanager\ndef open_file(name):\n    file = open(name, 'r')\n    try:\n        yield file\n    finally:\n        file.close()\n\nwith open_file('file.txt') as file:\n    content = file.read()",
                "code19": "import unittest\n\ndef add(a, b):\n    return a + b\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(-1, 1), 0)\n\nif __name__ == '__main__':\n    unittest.main()",
                "code20": "import pdb\n\ndef divide(a, b):\n    pdb.set_trace()  # Add a breakpoint here\n    return a / b",
                "code21": "# Create a virtual environment\npython -m venv my_environment\n\n# Activate the virtual environment\nsource my_environment/bin/activate  # On Windows: my_environment\\Scripts\\activate",
                "code22": "pip freeze > requirements.txt",
                "code23": "flat_list = [element for row in matrix for element in row]",
                "code24": "import cProfile\n\ndef slow_function():\n    pass\n\ncProfile.run('slow_function()')",
                "code25": "# My Project\n\nThis project performs calculations.\n\n## Installation",
                "code26": "# Install Sphinx\npip install sphinx\n\n# Initialize Sphinx\nsphinx-quickstart",
                "code27": "# Install flake8\npip install flake8\n\n# Run flake8\nflake8 my_code.py",
                "code28": "# Install black\npip install black\n\n# Format code with black\nblack mi_codigo.py",
                "code29": "# Don't use eval() if possible\n# eval(\"print('Hello')\")",
                "code30": "import html\n\ndef escape_html(text):\n    return html.escape(text)",
                "code31": "import asyncio\n\nasync def slow_task():\n    await asyncio.sleep(2)\n    return \"Task completed\"\n\nasync def main():\n    print(\"Iniciating task...\")\n    result = await slow_task()\n    print(result)\n\nasyncio.run(main())",
                "code32": "import asyncio\n\nasync def task():\n    await asyncio.sleep(1)\n    print(\"Task completed\")\n\nasync def main():\n    await asyncio.gather(task(), task())\n\n# Run the main function\nasyncio.run(main())"
			},
			{
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
				"name": "JavaScript",
                "miniDescription": "Language for interactive web programming.",
				"restrictions": ["E", "I"],
                "ask1": "Good syntax practices",
                "ask2": "Declaration of variables and constants",
                "ask3": "Modularity and code reuse",
                "ask4": "Clear separation of responsibilities",
                "ask5": "Efficient use of functions",
                "ask6": "Flow control and conditionals",
                "ask7": "Error handling",
                "ask8": "Asynchrony and promises",
                "ask9": "Efficient DOM management",
                "ask10": "Performance optimization",
                "ask11": "Efficiency in memory management",
                "ask12": "Testing and debugging",
                "ask13": "Readability and maintainability",
                "ask14": "Compatibility and standards",
                "ask15": "Security",
                "ask16": "Use of modern tools",
                "q1": "Meaningful naming:\nUse clear and descriptive names for variables, functions, classes, and constants. They should be easy to understand.",
                "q2": "Use of ; (semicolon):\nAlthough optional in many cases, its explicit use prevents possible errors with Automatic Semicolon Insertion (ASI).",
                "q3": "Use const and let instead of var:\nUse const when the variable will not change its value, and let when reassignment is necessary. Avoid using var, as it can lead to scope issues.",
                "q4": "Early declaration:\nDeclare variables and constants at the beginning of blocks for clarity and to avoid possible errors.",
                "q5": "Reusable functions:\nBreak the code into small, reusable functions instead of having monolithic functions.",
                "q6": "Modularization:\nUse modules (import/export) to separate functionalities into different files and promote reusability.",
                "q7": "Single Responsibility Principle (SRP):\nEnsure that each function, class, or module has a single responsibility, making the code easier to maintain and modify.",
                "q8": "Design patterns:\nUse patterns like MVC (Model-View-Controller) or MVVM to organize your code, especially in large projects.",
                "q9": "Pure functions:\nWhen possible, use pure functions, meaning those that have no side effects and always return the same result for the same arguments.",
                "q10": "Arrow functions (=>):\nUse arrow functions when you need to preserve the value of this, or when you have small and simple functions.",
                "q11": "Avoid nested conditions:\nUse flat conditions or early returns instead of nested conditionals to avoid complexity.",
                "q12": "Switch and guard clauses:\nUse switch to handle multiple cases, and guard clauses (early return) to improve function readability.",
                "q13": "Use try-catch:\nUse try-catch blocks to handle errors robustly, especially in asynchronous operations or code that may fail.",
                "q14": "Data validation:\nValidate input parameters in functions and ensure to handle invalid values.",
                "q15": "Use async and await:\nSince ES6, prefer using async/await to handle asynchronous code instead of promises or callbacks, which simplifies error handling and improves readability.",
                "q16": "Error handling in promises:\nAlways ensure to catch errors with .catch() in promises and use try-catch when working with async/await.",
                "q17": "Minimize direct DOM manipulation:\nInteracting with the DOM is costly, so it is advisable to minimize the number of accesses or changes.",
                "q18": "Event delegation:\nInstead of assigning events to multiple elements individually, use event delegation by assigning the event to a container element.",
                "q19": "Avoid unnecessary loops:\nUse methods like map(), filter(), and reduce() instead of for or while when appropriate, as they are more declarative and expressive.",
                "q20": "Debouncing and Throttling:\nImplement debouncing or throttling on intensive events like scroll or resize to improve performance.",
                "q21": "Avoid memory leaks:\nEnsure to clean up unused events or references, especially in long-running applications (e.g., removing event listeners).",
                "q22": "Object lifecycle management:\nUse objects and their references correctly, avoiding keeping unnecessary objects in memory.",
                "q23": "Write unit tests:\nUse frameworks like Jest or Mocha to write automated tests that ensure your code works as expected.",
                "q24": "Use debugging tools:\nTake advantage of debugging tools in browsers or development environments like Chrome DevTools or Visual Studio Code.",
                "q25": "Clear and precise comments:\nComment only when necessary to explain the why of a decision in the code, not the what it does.",
                "q26": "Documentation:\nUse JSDoc or similar tools to document functions, classes, and parameters clearly.",
                "q27": "Transpiling with Babel:\nUse Babel to ensure your code is compatible with older versions of browsers or environments that do not support the latest ECMAScript features.",
                "q28": "Polyfills:\nUse polyfills to provide support for functionalities not implemented in older browsers.",
                "q29": "Avoid using eval():\neval() can be dangerous as it executes dynamic code and can open security vulnerabilities.",
                "q30": "Escaping user input:\nAlways escape user input to prevent injection attacks like XSS (Cross-Site Scripting).",
                "q31": "NPM and Node.js:\nLeverage the NPM ecosystem to manage dependencies and modules, and use Node.js to run JavaScript on the server side.",
                "q32": "Webpack or Parcel:\nUse module bundlers like Webpack or Parcel to efficiently manage the loading of your application’s resources.",
                "code1": "// Descriptive names and consistent indentation\nfunction calculateRectangleArea(width, height) {\n    return width * height;\n}\n\n// Function call with clear variables\nconst rectangleWidth = 5;\nconst rectangleHeight = 10;\nconst area = calculateRectangleArea(rectangleWidth, rectangleHeight);\nconsole.log(`The area is ${area}`);",
                "code2": "const greeting = \"Hello\";\nconsole.log(greeting); // Explicit use of semicolon",
                "code3": "const PI = 3.14159; // Constant\nlet radius = 5;     // Variable that can change\nradius = 10;",
                "code4": "function calculateCircumference(radius) {\n    const PI = 3.14159;\n    return 2 * PI * radius;\n}",
                "code5": "// File math.js\nimport { sum } from './math.js';\n\nconst result = sum(2, 3);\nconsole.log(`The sum is ${result}`);",
                "code6": "export function sum(a, b) {\n    return a + b;\n}",
                "code7": "class User {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    showInfo() {\n        return `${this.name} is ${this.age} years old`;\n    }\n}\n\nconst user = new User(\"Ana\", 30);\nconsole.log(user.showInfo());",
                "code8": "// Model model.js\nexport class User {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n// ---\n\n// View view.js\n\nexport function showUser(user) {\n    console.log(`${user.name} is ${user.age} years old`);\n}\n\n// ---\n\n// Controller controller.js\n\nimport { User } from './model.js';\nimport { showUser } from './view.js';\n\nconst user = new User(\"Ana\", 30);\nshowUser(user);",
                "code9": "function multiply(a, b) {\n    return a * b; // Has no side effects\n}\n\nconst result = multiply(3, 4);\nconsole.log(`The product is ${result}`);",
                "code10": "const add = (a, b) => a + b;\nconsole.log(`The sum is ${add(5, 6)}`);",
                "code11": "function getAgeCategory(age) {\n    if (age < 0) {\n        throw new Error(\"Age cannot be negative\");\n    }\n    if (age < 18) {\n        return \"Minor\";\n    }\n    if (age < 65) {\n        return \"Adult\";\n    }\n    return \"Senior\";\n}",
                "code12": "function getDayName(day) {\n    switch (day) {\n        case 1: return \"Monday\";\n        case 2: return \"Tuesday\";\n        case 3: return \"Wednesday\";\n        case 4: return \"Thursday\";\n        case 5: return \"Friday\";\n        case 6: return \"Saturday\";\n        case 7: return \"Sunday\";\n        default: return \"Invalid day\";\n    }\n}\n\nconsole.log(getDayName(3)); // Wednesday",
                "code13": "try {\n    const result = JSON.parse(\"invalid text\"); // Will throw an error\n} catch (error) {\n    console.error(\"Error parsing JSON:\", error);\n}",
                "code14": "function divide(a, b) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    return a / b;\n}\n\ntry {\n    console.log(divide(10, 2)); // 5\n    console.log(divide(10, 0)); // Error\n} catch (error) {\n    console.error(error.message);\n}",
                "code15": "async function fetchData() {\n    return \"Data received\";\n}\n\nasync function processData() {\n    try {\n        const data = await fetchData();\n        console.log(data);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nprocessData();",
                "code16": "function fetchData() {\n    return new Promise((resolve, reject) => {\n        // Simulating an asynchronous operation\n        setTimeout(() => reject(new Error(\"Error fetching data\")), 1000);\n    });\n}\n\nfetchData()\n    .then(data => console.log(data))\n    .catch(error => console.error(\"Error:\", error));",
                "code17": "// Create a document fragment to avoid multiple DOM redraws\nconst fragment = document.createDocumentFragment();\nconst ul = document.createElement('ul');\n\nfor (let i = 0; i < 5; i++) {\n    const li = document.createElement('li');\n    li.textContent = `Item ${i}`;\n    fragment.appendChild(li);\n}\n\nul.appendChild(fragment);\ndocument.body.appendChild(ul);",
                "code18": "document.addEventListener('click', (event) => {\n    if (event.target.matches('.btn')) {\n        console.log('Button clicked');\n    }\n});",
                "code19": "const numbers = [1, 2, 3, 4, 5];\nconst doubles = numbers.map(num => num * 2);\nconsole.log(doubles); // [2, 4, 6, 8, 10]",
                "code20": "// Debounce\nfunction debounce(func, delay) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n}\n\nwindow.addEventListener('resize', debounce(() => {\n    console.log('Resized');\n}, 300));",
                "code21": "function createElement() {\n    const button = document.createElement('button');\n    button.textContent = 'Delete';\n    button.addEventListener('click', () => {\n        button.remove(); // Cleaning up the DOM\n    });\n    document.body.appendChild(button);\n}\n\ncreateElement();",
                "code22": "let object = { name: \"Example\" }; // Clear references\nobject = null;",
                "code23": "// File sum.js\nfunction sum(a, b) {\n    return a + b;\n}\n\nmodule.exports = sum;\n\n// File sum.test.js\nconst sum = require('./sum');\n\ntest('sum 1 + 2 is 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});",
                "code24": "// You can use `debugger` to set a breakpoint\nfunction sum(a, b) {\n    debugger; // Pause here to inspect variables\n    return a + b;\n}\n\nsum(1, 2);",
                "code25": "// Calculates the area of a rectangle\nfunction calculateArea(width, height) {\n    return width * height;\n}",
                "code26": "/**\n * Sums two numbers.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @returns {number} - The sum of `a` and `b`.\n */\nfunction sum(a, b) {\n    return a + b;\n}",
                "code27": "# Install Babel\nnpm install @babel/core @babel/cli @babel/preset-env --save-dev\n\n# Configure Babel in .babelrc\n{\n  \"presets\": [\"@babel/preset-env\"]\n}",
                "code28": "// Import polyfill for `fetch`\nimport 'whatwg-fetch';",
                "code29": "// Do not use `eval` to execute dynamic code\n// Example of unsafe code\n// eval('console.log(\"Hello\")');",
                "code30": "// Simplified escape example\nfunction escapeHtml(text) {\n    return text.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}",
                "code31": "# Initialize a Node.js project\nnpm init -y",
                "code32": "# Install Webpack\nnpm install --save-dev webpack webpack-cli\n\n# Configuration in webpack.config.js\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: __dirname + '/dist'\n    }\n};"
			},
			{
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
				"name": "PHP",
                "miniDescription": "Web backend, dynamic and simple.",
                "restrictions": ["E", "I"],
                "ask1": "Follow style and naming conventions",
                "ask2": "Modularization and code reusability",
                "ask3": "Avoid mixing logic and presentation",
                "ask4": "Proper use of variables and constants",
                "ask5": "Data validation and sanitization",
                "ask6": "Safe database handling",
                "ask7": "Avoid using obsolete code",
                "ask8": "Efficient exception and error handling",
                "ask9": "Performance optimization",
                "ask10": "Security in PHP",
                "ask11": "Use of Composer for dependency management",
                "ask12": "Writing unit tests",
                "ask13": "Proper use of versions",
                "ask14": "Comply with security recommendations",
                "ask15": "Use of strict typing",
                "ask16": "Use of namespaces",
                "q1": "Descriptive names:\nUse descriptive and clear names for variables and functions. Avoid confusing abbreviations and cryptic names.",
                "q2": "Consistent code style:\nFollow a coding convention like PSR-12 (PHP Standards Recommendations) that promotes uniform code style. Use camelCase for variables and methods, PascalCase for classes, and 4 spaces for indentation.",
                "q3": "Small and concise functions:\nEach function should have a single responsibility and do just one thing. This improves readability and makes unit testing easier.",
                "q4": "Proper use of classes and objects:\nPHP is an object-oriented language, so you should organize your code into classes where appropriate, utilizing concepts like inheritance, encapsulation, and composition.",
                "q5": "MVC (Model-View-Controller):\nImplement the MVC pattern to separate business logic, presentation layer, and database interaction. Use frameworks like Laravel or Symfony that implement this pattern.",
                "q6": "Template systems for views:\nUse template systems like Blade (in Laravel) or Twig to keep logic out of your views.",
                "q7": "Local variables:\nDeclare variables in the smallest possible scope to reduce the risk of name conflicts.",
                "q8": "Constants:\nUse define or const to declare values that won't change throughout the program. Since PHP 5.3+, it's recommended to use const within classes.",
                "q9": "Input validation:\nAlways validate user input. Use specific filters and functions like filter_var() to ensure data is of the expected type (integers, emails, URLs, etc.).",
                "q10": "Sanitizing data:\nClean input data to prevent attacks such as Cross-Site Scripting (XSS) or SQL injection. Use htmlspecialchars() to escape output in views.",
                "q11": "Use prepared statements:\nSecure your database queries by using prepared statements with PDO or mysqli to prevent SQL injection.",
                "q12": "Properly escape data:\nIf you cannot use prepared statements, escape input data using mysqli_real_escape_string() or equivalent functions.",
                "q13": "Avoid deprecated functions:\nKeep up with the latest PHP versions and avoid using obsolete functions like mysql_* in favor of mysqli or PDO.",
                "q14": "Avoid eval():\nUnless absolutely necessary, avoid eval() as it introduces critical vulnerabilities by executing arbitrary code.",
                "q15": "Proper error handling:\nConfigure error reporting appropriately for development and production environments. In development, use error_reporting(E_ALL) to display all errors, and hide them in production using display_errors = Off.",
                "q16": "Exceptions:\nUse exceptions to handle critical errors. Avoid using die() or exit() to abruptly stop program execution.",
                "q17": "Use require_once and include_once:\nUse require_once or include_once to avoid multiple file inclusions, which can cause errors and reduce performance.",
                "q18": "Optimize autoload:\nUse spl_autoload_register() or Composer's autoloader to load classes automatically when needed.",
                "q19": "Avoid unsafe file inclusion:\nNever allow users to directly control what files are included. Use safe absolute or relative paths.",
                "q20": "Secure session management:\nUse session_regenerate_id() to prevent session hijacking and store sensitive session data securely.",
                "q21": "Composer:\nUse Composer to manage external dependencies in your project. This makes it easier to install, update, and manage external libraries, ensuring you are using the correct and secure versions of each dependency.",
                "q22": "Autoloading:\nUse Composer's autoloading feature to automatically load classes, avoiding the need to manually write require or include statements.",
                "q23": "PHPUnit:\nUse PHPUnit to write unit tests that verify your code works as expected. Automated tests improve code quality and make it easier to catch bugs.",
                "q24": "Mocking:\nUse mocking to simulate objects and dependencies in your tests. This allows you to isolate the unit you are testing and verify its behavior without relying on external implementations, improving the reliability and speed of your tests.",
                "q25": "Keep the code up to date:\nEnsure that you are using a recent and compatible version of PHP. Older versions may have security vulnerabilities and lack performance improvements.",
                "q26": "Change Control:\nMaintain a clear record of changes in each version using a CHANGELOG. This document should detail new features, improvements, bug fixes, and API changes. A well-structured CHANGELOG allows developers and users to quickly understand what to expect in each version and makes migration to new versions easier.",
                "q27": "Protect against brute-force attacks:\nImplement security measures like limiting login attempts and using secure hashes (e.g., bcrypt or Argon2) for passwords.",
                "q28": "Input Validation and Sanitization:\nAlways validate and sanitize user input to prevent attacks such as SQL injections and XSS (Cross-Site Scripting). Use functions such as filter_var(), htmlspecialchars(), and prepared statements with PDO or MySQLi to ensure that the data entered is safe and processed correctly. This helps protect your application and user data from malicious manipulation.",
                "q29": "Improve code robustness:\nPHP allows strict typing as of version 7, which helps prevent runtime errors by enforcing data type compliance. By enabling strict_types, you ensure function parameters and return values match the defined types.",
                "q30": "Prevent automatic type conversion errors:\nUsing strict typing prevents automatic type conversions, making the code more predictable and reducing errors in functions expecting specific types.",
                "q31": "Avoid name conflicts:\nPHP 5.3 introduced namespaces, allowing you to organize code and avoid naming collisions, especially in large projects or when using many third-party libraries.",
                "q32": "Enhance modularity and maintainability:\nNamespaces help better organize classes and modules, making the code easier to maintain and preventing conflicts when integrating external libraries or working in large teams.",
                "code1": "$fullName = \"Javier Aranda\"; // Clear and descriptive",
                "code2": "<?php\n\n// Class in PascalCase\nclass MyExampleClass\n{\n    // Property in camelCase\n    private $username;\n\n    // Method in camelCase\n    public function setName(string $name): void\n    {\n        $this->username = $name;\n    }\n}",
                "code3": "# Function to calculate the area of a rectangle\ndef calculate_rectangle_area(width, height):\n    return width * height\n\n# Function to calculate the perimeter of a rectangle\ndef calculate_rectangle_perimeter(width, height):\n    return 2 * (width + height)",
                "code4": "class User {\n    private $name;\n    public function __construct($name) {\n        $this->name = $name;\n    }\n    public function getName() {\n        return $this->name;\n    }\n}",
                "code5": "// Model: App/Models/Product.php\nclass Product extends Model {\n    protected $fillable = ['name', 'price', 'quantity'];\n}\n\n// Controller: App/Http/Controllers/ProductController.php\nclass ProductController extends Controller {\n    public function index() {\n        $products = Product::all();\n        return view('products.index', ['products' => $products]);\n    }\n}\n\n// View: resources/views/products/index.blade.php\n@foreach ($products as $product)\n    <p>{{ $product->name }} - ${{ $product->price }}</p>\n@endforeach",
                "code6": "<!-- resources/views/products/list.blade.php -->\n@extends('layouts.app')\n\n@section('content')\n    <h1>Product List</h1>\n    @foreach ($products as $product)\n        <div class=\"product-item\">\n            <h2>{{ $product->name }}</h2>\n            <p>Price: ${{ $product->price }}</p>\n        </div>\n    @endforeach\n@endsection",
                "code7": "// Correct: the variable $total is only visible within the if block\nif ($condition) {\n    $total = $quantity * $price;\n    echo \"Total: $total\";\n}\n\n// Incorrect: the variable $total is in a broader scope than necessary\n$total = 0;\nif ($condition) {\n    $total = $quantity * $price;\n}\necho \"Total: $total\";",
                "code8": "class Config {  \n    const MAX_ATTEMPTS = 5;\n}",
                "code9": "$email = filter_var($email, FILTER_VALIDATE_EMAIL); // Validate email",
                "code10": "$safeName = htmlspecialchars($name, ENT_QUOTES, 'UTF-8'); // Convert special characters to HTML entities",
                "code11": "$stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n$stmt->execute(['email' => $email]);\n$user = $stmt->fetch(); // Fetch the user",
                "code12": "// Correct: Escaping input data\n$name = mysqli_real_escape_string($conn, $_POST['name']);\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysqli_query($conn, $query);\n\n// Incorrect: Input data not escaped, vulnerable to SQL injection\n$name = $_POST['name'];\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysqli_query($conn, $query);",
                "code13": "// Correct: Using PDO to access the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE name = :name\");\n    $stmt->bindParam(':name', $name);\n    $stmt->execute();\n} catch(PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n// Incorrect: Using a deprecated and vulnerable function\n$conn = mysql_connect($host, $username, $password);\nmysql_select_db($dbname, $conn);\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysql_query($query, $conn);",
                "code14": "// Incorrect: Using eval() to evaluate dynamic expressions\n$code = 'echo \"Hello, World!\";';\neval($code); // This can execute untrusted code and is risky\n\n// Correct: Safe alternatives to concatenate or process data\n$message = \"Hello, World!\";\necho $message; // Use directly instead of eval()",
                "code15": "// In development:\nini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL); // Show all errors and warnings\n\n// In production:\nini_set('display_errors', 0);\nini_set('display_startup_errors', 0);\nerror_reporting(0); // Hide all errors from the end user",
                "code16": "try {  \n    // Code that may fail\n} catch (Exception $e) {  \n    echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n}",
                "code17": "// Ensure the unique inclusion of a configuration file\nrequire_once 'config.php';\n\n// Include helper functions only once\ninclude_once 'helpers.php';",
                "code18": "// Autoloading using spl_autoload_register\nspl_autoload_register(function ($class) {\n    include 'classes/' . $class . '.php'; // Automatically load the class\n});\n\n// Example of usage\n$myObject = new MyClass(); // MyClass is automatically loaded from 'classes/MyClass.php'",
                "code19": "// Bad practice: user-controlled inclusion (vulnerable to attacks)\ninclude $_GET['file'];\n\n// Good practice: using safe and controlled paths\ninclude 'includes/safe.php';",
                "code20": "session_start(); // Start the session\n\n// Regenerate the session ID to prevent session hijacking\nsession_regenerate_id(true);\n\n// Store sensitive data securely\n$_SESSION['user'] = 'username';\n$_SESSION['role'] = 'admin'; // Example user role",
                "code21": "composer require monolog/monolog",
                "code22": "<?php\n// src/User.php\nnamespace App;\n\nclass User {\n    public function greet() {\n        return \"Hello, user!\";\n    }\n}\n\n// index.php\nrequire 'vendor/autoload.php'; // Composer autoload\n\nuse App\\User;\n\n$user = new User();\necho $user->greet(); // \"Hello, user!\"\n?>",
                "code23": "class CalculatorTest extends PHPUnit\\Framework\\TestCase {  \n    public function testSum() {  \n        $calc = new Calculator();  \n        $this->assertEquals(4, $calc->sum(2, 2));  \n    }\n}",
                "code24": "class PaymentGateway {\n    public function charge($amount) {}\n}\n\nclass Order {\n    public function __construct(private PaymentGateway $gateway) {}\n    public function processOrder($amount) {\n        $this->gateway->charge($amount);\n        return \"Order processed\";\n    }\n}\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass OrderTest extends TestCase {\n    public function testProcessOrder() {\n        $mock = $this->createMock(PaymentGateway::class);\n        $mock->expects($this->once())->method('charge')->with(100);\n        $this->assertEquals(\"Order processed\", (new Order($mock))->processOrder(100));\n    }\n}",
                "code25": "{\n    \"require\": {\n        \"php\": \"^8.0\"  // Specifies that PHP 8.0 or higher is required\n    }\n}",
                "code26": "# CHANGELOG\n\n## [1.1.0] - 2024-10-15\n### Added\n- New method `calculateArea()` in `Circle.php` to calculate the area of the circle.\n\n### Changed\n- Updated dependencies in `composer.json`.\n\n### Fixed\n- Fixed a bug in `processOrder()` method in `Order.php` that caused failures.\n\n## [1.0.0] - 2024-09-30\n### Added\n- Initial functionality to create a circle with a center and radius in `Circle.php`.",
                "code27": "$hash = password_hash($password, PASSWORD_BCRYPT);",
                "code28": "<?php\n// Database connection using PDO\n$pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');\n\n// Sanitize and validate user input\n$username = filter_var($_POST['username'], FILTER_SANITIZE_STRING);\n\n// Use a prepared statement to prevent SQL injections\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->bindParam(':username', $username);\n$stmt->execute();\n\n// Display results, sanitizing output to prevent XSS\nforeach ($stmt as $user) {\n    echo htmlspecialchars($user['username']);\n}\n?>",
                "code29": "declare(strict_types=1);\n\nfunction add(int $a, int $b): int {\n    return $a + $b;\n}\n\necho add(2, 3); // Works\n// echo add(2, '3'); // Would throw an error because '3' is a string",
                "code30": "<?php\ndeclare(strict_types=1); // Enable strict typing\n\nfunction add(int $a, int $b): int {\n    return $a + $b;\n}\n\n$result = add(2, 3); // Correct\necho $result;\n\n// This will throw a TypeError due to strict typing\n// $result = add(2.5, 3.0); // Uncomment to see the error\n?>",
                "code31": "namespace MyProject\\Models;\n\nclass User {\n    public function getName() {\n        return \"Juan\";\n    }\n}\n\n$user = new \\MyProject\\Models\\User();\necho $user->getName();",
                "code32": "<?php\n// Define a namespace\nnamespace MyApp\\Models;\n\nclass User {\n    public function __construct() {\n        echo \"User model loaded.\";\n    }\n}\n\n// Using the class\n$user = new User(); // Can be used directly thanks to the namespace\n?>"
			},
			{
                "id": "190E1A9D-20A4-4F98-AA54-B192E1C4D7B9",
				"name": "Java",
                "miniDescription": "Object-oriented, cross-platform, robust.",
				"restrictions": ["I", "D"],
                "ask1": "Follow naming and style conventions",
                "ask2": "Follow object-oriented design principles",
                "ask3": "Efficient use of collections and data structures",
                "ask4": "Memory and performance optimization",
                "ask5": "Good exception management",
                "ask6": "Use of classes and objects",
                "ask7": "Modularization and code reuse",
                "ask8": "Unit testing and code coverage",
                "ask9": "Proper use of concurrency and parallelism",
                "ask10": "Use of lambdas and streams (Java 8 and later)",
                "ask11": "Resource optimization",
                "ask12": "Code documentation",
                "ask13": "Use of design patterns",
                "ask14": "Dependency management",
                "ask15": "Security",
                "ask16": "Proper use of Optional (Java 8 and onwards)",
                "q1": "Classes and methods:\nUse clear and meaningful names. Class names should be in PascalCase and method names in camelCase.",
                "q2": "Variables and constants:\nVariables should follow camelCase and constants should be in uppercase with words separated by underscores (CONSTANT_EXAMPLE).",
                "q3": "Inheritance:\nUse inheritance only when there is a clear 'is a' relationship. If not, consider using composition.",
                "q4": "Abstraction:\nHide the internal details of how the class works and expose only what is necessary to interact with it.",
                "q5": "Choose the appropriate collection:\nUse ArrayList, LinkedList, HashMap, TreeMap, HashSet, etc., depending on the use case. For example, HashMap is ideal for fast lookups, but TreeMap maintains order.",
                "q6": "Generics:\nUse generics to ensure type safety and avoid unnecessary casting.",
                "q7": "Avoid unnecessary object creation:\nDo not create new objects when you can reuse them. Example: use StringBuilder or StringBuffer instead of concatenating Strings inside a loop.",
                "q8": "Lazy initialization:\nUse lazy initialization to load objects only when strictly necessary.",
                "q9": "Use exceptions responsibly:\nUse try-catch only where necessary. Avoid using exceptions to control the normal flow of the program.",
                "q10": "Cleanup with finally:\nUse finally to ensure that resources such as files or database connections are released properly.",
                "q11": "Use of constructors:\nProvide clear constructors and use the constructor pattern with parameters to efficiently initialize objects.",
                "q12": "Immutable classes:\nCreate immutable classes whenever possible, especially if instances will be shared among multiple threads.",
                "q13": "Follow the DRY principle (Don't Repeat Yourself):\nDo not repeat code unnecessarily. If you have repeated logic, consider abstracting it into a method or class.",
                "q14": "Use interfaces:\nDefine interfaces to promote reuse and flexibility. Classes should implement interfaces rather than relying on specific implementations.",
                "q15": "Unit tests:\nUse frameworks like JUnit to write unit tests that cover important cases in your code. These tests ensure that each component works in isolation.",
                "q16": "Mocks:\nUse tools like Mockito to simulate dependencies in unit tests and isolate the code you are testing.",
                "q17": "Use of threads and concurrency:\nUse threads only when necessary. If you are working in multi-threaded environments, ensure proper synchronization with synchronized, Locks, or tools from java.util.concurrent.",
                "q18": "Executor framework:\nUse the Executor Framework instead of manually managing threads for better resource management.",
                "q19": "Lambda functions:\nUse lambda expressions to simplify code, especially in collections and iteration handling.",
                "q20": "Streams:\nUse the Streams API to efficiently manipulate collections, facilitating operations like filtering, mapping, and reducing.",
                "q21": "Resource release:\nUse try-with-resources to ensure that resources such as files or database connections are automatically closed.",
                "q22": "Garbage Collection:\nAlthough Java handles memory automatically with garbage collection, avoid overhead by creating and destroying unnecessary objects.",
                "q23": "Javadoc:\nUse Javadoc to document your classes, methods, and attributes. This makes it easier for other developers (or yourself in the future) to understand the code without having to dive into its implementation.",
                "q24": "Comment the code:\nUsing clear comments facilitates understanding of the code and helps with its maintenance.",
                "q25": "Common patterns:\nFamiliarize yourself with design patterns such as Singleton, Factory, Observer, Builder, and Strategy, and apply them when appropriate to solve common software design problems.",
                "q26": "Anti-design patterns:\nAvoid anti-patterns like the 'God Object' (a class that does too much) or 'Spaghetti Code' (code without a clear structure and modularity).",
                "q27": "Maven or Gradle:\nUse dependency management tools like Maven or Gradle to handle third-party libraries and your project's dependencies.",
                "q28": "Versioning:\nProperly define the versions of your dependencies to avoid conflicts and ensure project stability.",
                "q29": "Input validation:\nAlways validate user input to avoid code injection or security attacks.",
                "q30": "Use secure libraries:\nKeep dependencies updated and use trusted libraries to handle sensitive tasks like cryptography or database access.",
                "q31": "Avoid null values:\nUse the Optional class to avoid common errors related to null values and NullPointerExceptions. Optional allows you to explicitly represent that a variable may not have a present value instead of using null.",
                "q32": "Avoid direct use of null:\nOptional improves code clarity and safety by forcing the developer to handle the possibility of an absent value appropriately.",
                "code1": "// Class in PascalCase\npublic class MyClass {\n    // Method in camelCase\n    public void myMethod() {\n        // code\n    }\n}",
                "code2": "// Variable in camelCase\nint maxNumber;\n\n// Constant in UPPERCASE\nstatic final int MAX_ATTEMPTS = 5;",
                "code3": "public class Animal {\n    public void makeSound() {\n        // generic sound\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof\");\n    }\n}",
                "code4": "public abstract class Animal {\n    abstract void makeSound();\n}\n\npublic class Dog extends Animal {\n    @Override\n    void makeSound() {\n        System.out.println(\"Woof\");\n    }\n}",
                "code5": "// ArrayList for quick access by index\nList<String> list = new ArrayList<>();\n\n// HashMap for fast key-based lookup\nMap<String, String> map = new HashMap<>();",
                "code6": "List<String> list = new ArrayList<>();\nlist.add(\"Element\");\nString item = list.get(0);",
                "code7": "StringBuilder builder = new StringBuilder();\nfor (int i = 0; i < 10; i++) {\n    builder.append(i);\n}\nString result = builder.toString();",
                "code8": "private SomeResource resource;\n\npublic SomeResource getResource() {\n    if (resource == null) {\n        resource = new SomeResource();\n    }\n    return resource;\n}",
                "code9": "try {\n    // code that may throw an exception\n} catch (IOException e) {\n    // Specific handling of IOException\n}",
                "code10": "try {\n    FileReader reader = new FileReader(\"file.txt\");\n    // Logic\n} catch (IOException e) {\n    e.printStackTrace();\n} finally {\n    // Cleanup code\n}",
                "code11": "public class Car {\n    private String brand;\n    private String model;\n\n    // Constructor with parameters\n    public Car(String brand, String model) {\n        this.brand = brand;\n        this.model = model;\n    }\n}",
                "code12": "public final class Point {\n    private final int x;\n    private final int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public int getX() { return x; }\n    public int getY() { return y; }\n}",
                "code13": "// Reusable method\npublic class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n}",
                "code14": "public interface Operation {\n    int execute(int a, int b);\n}\n\npublic class Addition implements Operation {\n    @Override\n    public int execute(int a, int b) {\n        return a + b;\n    }\n}",
                "code15": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class CalculatorTest {\n    @Test\n    public void testAdd() {\n        Calculator calc = new Calculator();\n        assertEquals(5, calc.add(2, 3));\n    }\n}",
                "code16": "import static org.mockito.Mockito.*;\nimport org.junit.Test;\n\npublic class MyServiceTest {\n    @Test\n    public void testService() {\n        MyDependency dependency = mock(MyDependency.class);\n        when(dependency.getData()).thenReturn(\"data\");\n\n        MyService service = new MyService(dependency);\n        String result = service.getData();\n\n        assertEquals(\"data\", result);\n    }\n}",
                "code17": "ExecutorService executor = Executors.newFixedThreadPool(10);\nexecutor.submit(() -> {\n    // Concurrent task\n});\nexecutor.shutdown();",
                "code18": "ExecutorService executor = Executors.newFixedThreadPool(10);\nexecutor.submit(() -> {\n    // Concurrent task\n});",
                "code19": "List<String> names = Arrays.asList(\"Juan\", \"Pedro\", \"Maria\");\nnames.forEach(name -> System.out.println(name));",
                "code20": "List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\nList<Integer> squares = numbers.stream()\n                                .map(n -> n * n)\n                                .collect(Collectors.toList());",
                "code21": "try (BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"))) {\n    // Reading logic\n} catch (IOException e) {\n    e.printStackTrace();\n}",
                "code22": "// Avoid creating unnecessary objects\nString string = \"Hello\";\nString concatenatedString = string + \" World\"; // Better to use StringBuilder in loops",
                "code23": "/**\n * Represents a car with brand and model.\n */\npublic class Car {\n    private String brand;\n    private String model;\n\n    /**\n     * Creates a new car.\n     *\n     * @param brand the brand of the car\n     * @param model the model of the car\n     */\n    public Car(String brand, String model) {\n        this.brand = brand;\n        this.model = model;\n    }\n}",
                "code24": "public class Calculator {\n\n    // Adds two numbers\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    // Subtracts two numbers\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n}\n\n// Using the Calculator class\npublic class Main {\n    public static void main(String[] args) {\n        Calculator calc = new Calculator();\n        System.out.println(\"Addition: \" + calc.add(5, 3)); // Output: Addition: 8\n        System.out.println(\"Subtraction: \" + calc.subtract(5, 3)); // Output: Subtraction: 2\n    }\n}",
                "code25": "// Singleton\npublic class Singleton {\n    private static Singleton instance;\n\n    private Singleton() {}\n\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}",
                "code26": "// Avoid the God Object by dividing responsibilities\npublic class User {\n    private String name;\n    private String email;\n    // more attributes\n\n    // Methods related to user management\n}\n\npublic class EmailService {\n    public void sendEmail(String email, String message) {\n        // Code to send an email\n    }\n}",
                "code27": "// build.gradle for Gradle\ndependencies {\n    implementation 'org.springframework:spring-core:5.3.12'\n}\n\n// ---\n\n<!-- pom.xml for Maven -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>5.3.12</version>\n</dependency>",
                "code28": "<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>[5.3.12]</version> <!-- Specify a specific version or range -->\n</dependency>",
                "code29": "import java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class UserRegistration {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String username, email;\n\n        do {\n            System.out.print(\"Username: \");\n            username = scanner.nextLine();\n        } while (!Pattern.matches(\"^[a-zA-Z0-9]{3,15}$\", username));\n\n        do {\n            System.out.print(\"Email: \");\n            email = scanner.nextLine();\n        } while (!Pattern.matches(\".+@.+\\\\..+\", email));\n\n        System.out.println(\"Registration successful!\");\n    }\n}",
                "code30": "// Use updated libraries for cryptography, for example\nimport javax.crypto.Cipher;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\n\n// Example of using KeyGenerator to generate encryption keys\nKeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\nkeyGen.init(256); // for a 256-bit key\nSecretKey key = keyGen.generateKey();",
                "code31": "import java.util.Optional;\n\npublic class OptionalExample {\n    public static void main(String[] args) {\n        Optional<String> name = getName();\n\n        // Avoids errors with null values\n        if (name.isPresent()) {\n            System.out.println(\"The name is: \" + name.get());\n        } else {\n            System.out.println(\"Name not available\");\n        }\n    }\n\n    static Optional<String> getName() {\n        return Optional.ofNullable(null); // Can be a value or null\n    }\n}",
                "code32": "Optional<String> name = Optional.ofNullable(getName());\nname.ifPresent(n -> System.out.println(\"Name: \" + n));"
			},
            {
                "id": "CF088A2D-14BD-4CE0-8723-0A22885FCB94",
                "name": "C#",
                "miniDescription": "Versatile, object-oriented, for Windows and web applications.",
                "restrictions": ["I", "D"],
                "ask1": "Follow C# style guidelines",
                "ask2": "Efficient use of classes, methods, and properties",
                "ask3": "Efficient exception handling",
                "ask4": "Use of collections and LINQ",
                "ask5": "Modularization and code reuse",
                "ask6": "Object-oriented programming",
                "ask7": "Use of design patterns",
                "ask8": "Efficient use of nullable types",
                "ask9": "Efficient use of resources",
                "ask10": "Concurrency and parallelism management",
                "ask11": "Best practices with lambda expressions and delegates",
                "ask12": "Unit testing and code coverage",
                "ask13": "Use of comments and XML documentation",
                "ask14": "Dependency management with NuGet",
                "ask15": "Security and validation",
                "ask16": "Proper use of async and await for asynchronous programming",
                "q1": "Class and method naming:\nClasses should use PascalCase and methods should also.\n\nExample:\n- CustomerService\n- CalculateTotal().",
                "q2": "Variables and parameters:\nUse camelCase for local variables, parameters, and private fields. Example:\nint productCount.",
                "q3": "Small and specialized methods:\nMethods should have a single responsibility (single responsibility principle). If a method has multiple responsibilities, split it into several smaller methods.",
                "q4": "Use properties instead of public fields:\nUse properties (get/set) to access the internal data of classes. This maintains the encapsulation principle.",
                "q5": "Handle exceptions properly:\nUse try-catch only when necessary and catch specific exceptions rather than catch (Exception e).",
                "q6": "Creating custom exceptions:\nDefine custom exceptions when you need to handle specific situations in your application.",
                "q7": "Choose the right collection:\nUse List, Dictionary, Queue, Stack, HashSet, etc., depending on the use case. For example, use a Dictionary when you need key-value mappings.",
                "q8": "Use LINQ for efficient queries:\nLINQ simplifies queries on collections and improves readability. Avoid unnecessary loops when you can use LINQ.",
                "q9": "Separation of concerns (SoC):\nDivide the logic of the code into layers (for example, presentation, business logic, and data access) so that each part has a single responsibility.",
                "q10": "Use of interfaces and abstraction:\nDefine interfaces to allow for reuse and flexibility in implementation. Use abstraction when specific details are not necessary for the code user.",
                "q11": "Encapsulation:\nKeep data private and provide controlled access through methods and properties.",
                "q12": "Composition over inheritance:\nWhenever possible, prefer composition to inheritance, i.e., create smaller classes that collaborate with each other instead of creating deep inheritance hierarchies.",
                "q13": "Singleton:\nUse the “Singleton” pattern to ensure that a class has only one instance. Make sure it is “thread-safe” if used in a concurrent environment.",
                "q14": "Factory and Dependency Injection:\nUse the “Factory” pattern to create instances of objects and “Dependency Injection” to improve flexibility and maintainability of code.",
                "q15": "Avoid null reference errors:\nUse operators like “?.” (null conditional) to avoid null reference exceptions.",
                "q16": "Null coalescing operator (”??”):\nUse “??” to provide a default value when a variable may be null.",
                "q17": "Using pattern:\nUse the “using” block to handle automatic resource release for objects that implement the “IDisposable” interface (such as database connections, files, etc.).",
                "q18": "Resource disposal:\nEnsure that objects consuming resources (like database connections or streams) are closed or released appropriately.",
                "q19": "Tasks and “async/await”:\nUse “Task” and “async/await” to perform asynchronous tasks without blocking the main thread. This is especially useful in applications that require high responsiveness like web or desktop applications.",
                "q20": "Multi-threading:\nUse TPL (Task Parallel Library) or PLINQ to parallelize tasks without explicitly managing threads. Avoid manually handling threads if not necessary.",
                "q21": "Delegates and Func/Action:\nUse lambda expressions when you need to pass functions as parameters to other methods, or use the “Func<>” and “Action<>” types to simplify code.",
                "q22": "Lambda expressions:\nLambda expressions allow you to define anonymous functions concisely. Using lambdas improves readability and simplifies operations on collections, especially for filtering and transformation.",
                "q23": "Unit tests:\nUse frameworks like “NUnit” or “xUnit” to create unit tests that ensure your code works correctly in isolation.",
                "q24": "Mocking:\nUse mocking frameworks like “Moq” to simulate dependencies and test your code independently.",
                "q25": "Document with XML:\nUse XML documentation comments (”///”) to describe classes, methods, parameters, and return types. This not only improves readability but can also be used to generate documentation.",
                "q26": "Clear comments:\nHelp other developers understand the logic and purpose of code sections. It is important that comments are concise and relevant, avoiding obvious explanations.",
                "q27": "Use of NuGet packages:\nUse “NuGet” to manage dependencies and external libraries. Properly define the versions of dependencies to avoid compatibility issues.",
                "q28": "Dependency updates:\nKeep your NuGet packages up to date, especially when it comes to security updates.",
                "q29": "Use of safe libraries:\nUse trusted libraries to handle tasks like cryptography or authentication.",
                "q30": "Input validation:\nAlways validate user input to avoid attacks like SQL injection or XSS.",
                "q31": "Optimization of asynchronous tasks:\nIn C#, using “async” and “await” allows for performing tasks that involve input/output operations (like database or network calls) without blocking the main thread. This improves the performance of applications that require multiple concurrent operations without blocking the user interface or main application flow.",
                "q32": "Avoid thread blocking:\nUsing async and await correctly prevents thread blocking, improving efficiency and responsiveness, especially in graphical user interface applications or high-performance web services.",
                "code1": "class ClientService {\npublic:\n    void CalculateTotal() {\n        // Logic to calculate the total\n    }\n};\n\nint main() {\n    ClientService service;\n    service.CalculateTotal();\n    return 0;\n}",
                "code2": "void calculateTotal(int productQuantity) {\n    int pricePerProduct = 20;\n    int total = productQuantity * pricePerProduct;\n    // Logic to handle the total\n}\n\nint main() {\n    int productQuantity = 5;\n    calculateTotal(productQuantity);\n    return 0;\n}",
                "code3": "class Order {\npublic:\n    void calculateTotal() {\n        double total = getSubtotal();\n        double taxes = calculateTaxes(total);\n        double finalTotal = total + taxes;\n        // Logic to handle the final total\n    }\n\nprivate:\n    double getSubtotal() {\n        // Logic to calculate the subtotal\n        return 100.0; // Example\n    }\n\n    double calculateTaxes(double subtotal) {\n        return subtotal * 0.21; // Example of taxes\n    }\n};",
                "code4": "public class Person {  \n    public string Name { get; set; }  \n    private int age;\n\n    public int Age {  \n        get { return age; }  \n        set {  \n            if (value > 0) age = value;  \n        }  \n    }\n}",
                "code5": "try {  \n    var number = int.Parse(\"abc\");\n} catch (FormatException ex) {  \n    Console.WriteLine(\"Error: the format is not correct.\");\n}",
                "code6": "public class MyCustomException : Exception {  \n    public MyCustomException(string message) : base(message) { }\n}",
                "code7": "using System;\nusing System.Collections.Generic;\n\nclass CollectionsExample {\n    public void Show() {\n        // Dictionary for key-value mappings\n        var ages = new Dictionary<string, int> { { \"Juan\", 30 }, { \"María\", 25 } };\n        \n        // List for an ordered list\n        var names = new List<string> { \"Juan\", \"María\" };\n        \n        // Accessing a Dictionary\n        Console.WriteLine($\"Age of Juan: {ages[\\\"Juan\\\"]}\");\n    }\n}",
                "code8": "var names = new List<string> { \"Juan\", \"Pedro\", \"Maria\" };  \nvar namesWithM = names.Where(n => n.StartsWith(\"M\"));",
                "code9": "// Data access\npublic class Repository {\n    public void GetData() { /*...*/ }\n}\n\n// Business logic\npublic class Service {\n    private readonly Repository _repository = new Repository();\n    public void ProcessData() { _repository.GetData(); }\n}\n\n// Presentation\npublic class Controller {\n    private readonly Service _service = new Service();\n    public void ShowData() { _service.ProcessData(); }\n}",
                "code10": "// Interface definition\npublic interface IVehicle {\n    void Drive();\n}\n\n// Interface implementation\npublic class Car : IVehicle {\n    public void Drive() { /* Method implementation */ }\n}\n\npublic class Motorcycle : IVehicle {\n    public void Drive() { /* Method implementation */ }\n}\n\n// Using the interface\npublic class Workshop {\n    public void Repair(IVehicle vehicle) {\n        vehicle.Drive(); // Calls the method without worrying about the implementation\n    }\n}",
                "code11": "public class BankAccount {\n    private decimal balance; // Private data\n\n    // Method to deposit\n    public void Deposit(decimal amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    // Method to get the balance\n    public decimal GetBalance() {\n        return balance; // Controlled access\n    }\n}\n\n// Using the class\nvar account = new BankAccount();\naccount.Deposit(100);\ndecimal currentBalance = account.GetBalance();",
                "code12": "public class Engine {\n    public void Start() {}\n}\n\npublic class Car {\n    private Engine engine = new Engine(); // Composition\n\n    public void Drive() {\n        engine.Start();\n    }\n}\n\n// Usage\nvar car = new Car();\ncar.Drive();",
                "code13": "public class Singleton {  \n    private static Singleton instance = null;  \n    private static readonly object lockObj = new object();  \n  \n    private Singleton() { }  \n  \n    public static Singleton Instance {  \n        get {  \n            lock (lockObj) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n                return instance;  \n            }  \n        }  \n    }  \n}",
                "code14": "// Interface\npublic interface IVehicle {\n    void Drive();\n}\n\n// Concrete class\npublic class Car : IVehicle {\n    public void Drive() { /* Driving logic */ }\n}\n\n// Factory\npublic class VehicleFactory {\n    public IVehicle CreateVehicle() => new Car();\n}\n\n// Usage\nvar vehicle = new VehicleFactory().CreateVehicle();\nvehicle.Drive();",
                "code15": "string name = person?.Name;",
                "code16": "string name = person?.Name ?? \"Unknown\";",
                "code17": "using (var file = new StreamReader(\"file.txt\")) {  \n    string content = file.ReadToEnd();\n}",
                "code18": "using (var connection = new SqlConnection(\"connection_string\")) {\n    connection.Open();\n    // Logic for using the connection\n} // The connection is automatically closed when exiting the block",
                "code19": "public async Task<int> GetDataAsync() { \n    await Task.Delay(1000);\n    return 42;\n}",
                "code20": "Parallel.For(0, 10, i => {\n    // Logic for each task\n    Console.WriteLine($\"Task {i}\");\n});",
                "code21": "Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(2, 3)); // Result: 5",
                "code22": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n\n        // Filter even numbers\n        var evens = numbers.Where(n => n % 2 == 0).ToList();\n\n        Console.WriteLine(\"Even numbers: \" + string.Join(\", \", evens)); // Output: Even numbers: 2, 4\n    }\n}",
                "code23": "[Test]\npublic void Add_TwoNumbers_ReturnsCorrectResult() {\n    // Arrange\n    var calculator = new Calculator();\n    \n    // Act\n    var result = calculator.Add(2, 3);\n    \n    // Assert\n    Assert.AreEqual(5, result);\n}",
                "code24": "var mockService = new Mock<IService>();\nmockService.Setup(s => s.GetData()).Returns(new List<string> { \"data1\", \"data2\" });\n\nvar controller = new Controller(mockService.Object);\nvar result = controller.ShowData();\n\nAssert.AreEqual(\"data1\", result.First());",
                "code25": "/// <summary>\n/// Calculates the area of a circle given its radius.\n/// </summary>\n/// <param name=\"radius\">Radius of the circle.</param>\n/// <returns>The calculated area.</returns>\npublic double CalculateArea(double radius) {\n    return Math.PI * radius * radius;\n}",
                "code26": "public class Calculator {\n    // Adds two numbers\n    public int Add(int a, int b) => a + b;\n\n    // Subtracts two numbers\n    public int Subtract(int a, int b) => a - b;\n}\n\npublic class Program {\n    public static void Main() {\n        var calc = new Calculator();\n        Console.WriteLine(\"Sum: \" + calc.Add(5, 3)); // Output: Sum: 8\n    }\n}",
                "code27": "<PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />",
                "code28": "dotnet outdated",
                "code29": "use System.Text.RegularExpressions;\n\n// Example of input validation to prevent XSS\npublic bool IsInputValid(string input)\n{\n    // Avoid special characters to prevent XSS\n    string pattern = @\"^[a-zA-Z0-9]*$\";\n    return Regex.IsMatch(input, pattern);\n}",
                "code30": "use System.Security.Cryptography;\n\n// Example of using a secure library to generate a hash\npublic string GenerateHash(string text)\n{\n    using (var sha256 = SHA256.Create())\n    {\n        byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(text));\n        return Convert.ToBase64String(bytes);\n    }\n}",
                "code31": "using System;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        Console.WriteLine(\"Starting asynchronous task...\");\n        string result = await GetResultAsync();\n        Console.WriteLine(result);\n    }\n\n    static async Task<string> GetResultAsync()\n    {\n        await Task.Delay(2000); // Simulating a long-running operation\n        return \"Task completed\";\n    }\n}",
                "code32": "use System.Net.Http;\nusing System.Threading.Tasks;\n\n// Asynchronous method that prevents thread blocking\npublic async Task<string> GetDataAsync(string url)\n{\n    using HttpClient client = new HttpClient();\n    // Avoids blocking the thread while waiting for the response\n    return await client.GetStringAsync(url);\n}"
            },
		]
	},
	{
		"name": "Functional and Declarative Languages",
        "id": "3D97FAB4-50AC-40FC-9BF0-3F46BB6A92F5",
		"items": [
			{
                "id": "D44AAEBC-BF4F-42CD-8C37-0FEF772A5B69",
				"name": "SQL",
                "miniDescription": "Query and manage databases.",
				"restrictions": ["E", "I"],
                "ask1": "Write readable and structured queries",
                "ask2": "Database normalization",
                "ask3": "Proper use of indexes",
                "ask4": "Query optimization",
                "ask5": "Transaction management",
                "ask6": "Proper handling of relationships between tables",
                "ask7": "Secure queries against SQL injection",
                "ask8": "Efficient use of GROUP BY and ORDER BY",
                "ask9": "Proper handling of NULL",
                "ask10": "Avoid data redundancy",
                "ask11": "Proper use of views",
                "ask12": "Proper use of aggregate functions",
                "ask13": "Query planning",
                "ask14": "Documentation and comments in SQL code",
                "ask15": "Use of subqueries and CTEs (Common Table Expressions)",
                "ask16": "Avoid using SELECT *",
                "q1": "Consistent use of uppercase and lowercase:\nUse uppercase for SQL keywords and lowercase for table and column names, making queries more readable.",
                "q2": "Indentation and organization of code:\nUse line breaks and indentation to make queries easier to read. This is especially important in complex queries.",
                "q3": "Proper structure:\nApply normalization principles to avoid data redundancy and improve integrity. The Third Normal Form (3NF) is generally sufficient for most cases:\n\n- Ensure that tables do not have repeated data and that each field contains a single value\n- Ensure that each column depends on the primary key\n- Avoid dependencies between non-key columns.",
                "q4": "Avoid over-relationship:\nWhile normalization is essential, do not overly relate tables if it affects performance. In certain cases, denormalization can improve query efficiency.",
                "q5": "Add indexes:\nIndexes improve query performance by allowing the database to access data more quickly. Be sure to create indexes on columns that are frequently used in search conditions (WHERE), groupings (GROUP BY), ordering (ORDER BY), and joins (JOIN).",
                "q6": "Composite indexes:\nUse composite indexes when frequent queries involve multiple columns.",
                "q7": "Avoid excessive use of SELECT *:\nOnly select the columns you really need. Using SELECT * can unnecessarily increase the load by returning data you don't need.",
                "q8": "Proper use of JOIN:\nEnsure that table joins (JOIN) are correct. Use the appropriate type of JOIN (INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN) according to the context.",
                "q9": "Use transactions:\nFor operations involving multiple queries (such as inserts or updates across multiple tables), use transactions to ensure that all operations complete successfully or none apply. Use COMMIT to confirm the transaction or ROLLBACK to undo changes in case of error.",
                "q10": "Ensure atomicity:\nTransactions ensure that a set of operations executes as a unit. If any part fails, all operations performed are undone.",
                "q11": "Foreign keys:\nUse foreign keys to maintain referential integrity between tables. This ensures that data in one table correctly corresponds to related data in another.",
                "q12": "Proper use of relationships:\nIf relationships between tables are hierarchical or have complex dependencies, ensure that you define the appropriate keys and constraints to avoid inconsistencies.",
                "q13": "Prepared parameters:\nUse parameterized queries to avoid SQL injections. Avoid directly concatenating user inputs into queries.",
                "q14": "Properly escape data:\nIf not using prepared queries, ensure you properly escape user inputs.",
                "q15": "Grouping and ordering:\nAvoid grouping or ordering large volumes of data unnecessarily. Use indexes on columns that are frequently used in GROUP BY and ORDER BY to improve performance.",
                "q16": "ORDER BY:\nAvoid unnecessarily sorting large volumes of data. Use indexes on columns that are frequently used in ORDER BY to improve performance.",
                "q17": "NULL conditions:\nColumns that contain NULL values should be treated carefully in queries. Use IS NULL or IS NOT NULL instead of = to check for null values.",
                "q18": "Use of functions:\nTake advantage of functions like COALESCE and NULLIF to effectively handle NULL values. COALESCE returns the first non-NULL value in the list, while NULLIF compares two values and returns NULL if they are equal. This helps avoid errors and simplifies queries.",
                "q19": "Efficient database design:\nEnsure that data is not unnecessarily repeated. Use foreign keys and appropriate relationships to avoid information duplication.",
                "q20": "Default values:\nDefine appropriate default values for columns that might not receive an explicit value during insertion.",
                "q21": "Views to simplify complex queries:\nUse views to encapsulate complex queries and facilitate access to data from multiple tables without having to write a complex query every time.",
                "q22": "Limitations of views:\nKeep in mind that some views can be slow if not well-optimized. Ensure that views do not introduce performance issues.",
                "q23": "Aggregate functions:\nUse functions like COUNT(), SUM(), AVG(), MAX(), MIN() to perform operations on groups of data.",
                "q24": "Use HAVING:\nUse HAVING to filter results after performing an aggregation.",
                "q25": "Explain the execution plan:\nUse the EXPLAIN command or its equivalent in your database system to see the execution plan of a query and understand how the database is processing the query.",
                "q26": "Optimization based on the execution plan:\nIf you see that a query is performing a full table scan, consider adding indexes or restructuring the query.",
                "q27": "Clear comments:\nDocument SQL queries to describe their purpose, especially if they are complex. Use comments in SQL using -- or /* */ to annotate key parts of the code.",
                "q28": "Standardization and clarity:\nMaintain a consistent style in comments. Use comments that are concise and specific. This not only improves readability but also makes long-term code maintenance easier.",
                "q29": "Improving readability and organization:\nSubqueries and CTEs allow structuring complex queries by breaking the work into more manageable parts. CTEs, in particular, introduced with the WITH clause, facilitate reusing intermediate results within the same query.",
                "q30": "Improving performance in complex queries:\nCTEs can improve clarity and performance compared to nested subqueries, allowing for result reuse and better organization of SQL queries.",
                "q31": "Specify the necessary columns:\nUsing SELECT * may be tempting, but it is a bad practice as it can negatively impact performance, especially if you do not need all the columns from a table. Additionally, if new columns are added to a table, SELECT * could extract unwanted data.",
                "q32": "Improve efficiency and clarity:\nBy specifying only the necessary columns, you reduce bandwidth consumption and speed up query response time, especially in large databases.",
              "code1": "SELECT name, age\nFROM employees\nWHERE age > 30;",
              "code2": "SELECT name, age\nFROM employees\nWHERE age > 30\nORDER BY age DESC;",
              "code3": "-- Customers Table\nCREATE TABLE Customers (\n    CustomerID INT PRIMARY KEY,\n    Name VARCHAR(100)\n);\n\n-- Orders Table\nCREATE TABLE Orders (\n    OrderID INT PRIMARY KEY,\n    CustomerID INT,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);",
              "code4": "-- Products Table (denormalized)\nCREATE TABLE Products (\n    ProductID INT PRIMARY KEY,\n    ProductName VARCHAR(100),\n    Category VARCHAR(50)  -- Category information included directly\n);\n\n-- Categories Table (normalized)\nCREATE TABLE Categories (\n    CategoryID INT PRIMARY KEY,\n    CategoryName VARCHAR(50)\n);",
              "code5": "CREATE INDEX idx_age ON employees (age);",
              "code6": "CREATE INDEX idx_name_age ON employees (name, age);",
              "code7": "-- Bad use:\nSELECT * FROM employees;\n\n-- Good use:\nSELECT name, age FROM employees;",
              "code8": "SELECT e.name, d.name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.id;",
              "code9": "BEGIN TRANSACTION;\n\nINSERT INTO employees (name, salary) VALUES ('Juan', 50000);\nUPDATE departments SET budget = budget - 50000 WHERE name = 'Sales';\n\nCOMMIT;",
              "code10": "BEGIN; -- Start the transaction\n\n-- Attempt to perform operations\nINSERT INTO Accounts (AccountID, Balance) VALUES (1, 1000);\nINSERT INTO Accounts (AccountID, Balance) VALUES (2, 500);\n\n-- Commit the transaction\nCOMMIT;",
              "code11": "CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    department_id INT,\n    FOREIGN KEY (department_id) REFERENCES departments(id)\n);",
              "code12": "-- Employees Table\nCREATE TABLE Employees (\n    EmployeeID INT PRIMARY KEY,\n    Name VARCHAR(100),\n    ManagerID INT,\n    FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID) ON DELETE SET NULL\n);",
              "code13": "// Example in MySQL with PHP\n$stmt = $pdo->prepare('SELECT name FROM employees WHERE id = :id');\n$stmt->execute(['id' => $id]);",
              "code14": "// Database connection\n$connection = new mysqli(\\\"localhost\\\", \\\"username\\\", \\\"password\\\", \\\"database\\\");\n\n// User input\\n$userInput = \\\"O'Reilly\\\"; // Name containing an apostrophe\n\n// Escape user input\n$safeInput = $connection->real_escape_string($userInput);\n\n// SQL query\\n$query = \\\"INSERT INTO Authors (Name) VALUES ('$safeInput')\\\";$connection->query($query);",
              "code15": "SELECT department, COUNT(*)\nFROM employees\nGROUP BY department;",
              "code16": "SELECT name, price\nFROM products\nORDER BY price DESC;",
              "code17": "SELECT name\nFROM employees\nWHERE salary IS NULL;",
              "code18": "SELECT name, COALESCE(price, 0) AS final_price\nFROM products;",
              "code19": "-- Customers Table\nCREATE TABLE Customers (\n    CustomerID INT PRIMARY KEY,\n    Name VARCHAR(100)\n);\n\n-- Orders Table\nCREATE TABLE Orders (\n    OrderID INT PRIMARY KEY,\n    CustomerID INT,\n    OrderDate DATE,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);",
              "code20": "CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    salary DECIMAL(10,2) DEFAULT 0.00\n);",
              "code21": "CREATE VIEW employee_view AS\nSELECT e.name, d.name AS department\nFROM employees e\nJOIN departments d ON e.department_id = d.id;",
              "code22": "-- Create a view that joins multiple tables\nCREATE VIEW CustomerOrders AS\nSELECT c.CustomerID, c.Name, o.OrderID, o.OrderDate\nFROM Customers c\nJOIN Orders o ON c.CustomerID = o.CustomerID;\n\n-- Query the view\nSELECT *\nFROM CustomerOrders\nWHERE OrderDate > '2023-01-01';",
              "code23": "SELECT AVG(salary)\nFROM employees\nWHERE department = 'Sales';",
              "code24": "SELECT department, AVG(salary)\nFROM employees\nGROUP BY department\nHAVING AVG(salary) > 40000;",
              "code25": "EXPLAIN SELECT *\nFROM employees\nWHERE department_id = 1;",
              "code26": "-- Query that may cause a full table scan\nSELECT *\nFROM Orders\nWHERE CustomerID = 123;\n\n-- Add an index to optimize the query\nCREATE INDEX idx_customer_id ON Orders(CustomerID);",
              "code27": "-- Select employees with salaries greater than 50000\nSELECT name, salary\nFROM employees\nWHERE salary > 50000;",
              "code28": "/* This block of code updates the prices of the products */\nUPDATE products\nSET price = price * 1.10  -- Increases the price by 10%\nWHERE category = 'Electronics'; /* Applies only to products in Electronics */",
              "code29": "WITH TotalSales AS (\n    SELECT customer_id, SUM(amount) AS total_sales\n    FROM sales\n    GROUP BY customer_id\n)\nSELECT c.name, v.total_sales\nFROM customers c\nJOIN TotalSales v ON c.id = v.customer_id\nORDER BY v.total_sales DESC;",
              "code30": "-- Use a CTE to calculate the total orders per customer\nWITH TotalOrders AS (\n    SELECT CustomerID, COUNT(*) AS OrderCount\n    FROM Orders\n    GROUP BY CustomerID\n)\nSELECT c.CustomerID, c.Name, t.OrderCount\nFROM Customers c\nJOIN TotalOrders t ON c.CustomerID = t.CustomerID;",
              "code31": "-- Avoid this:\nSELECT * FROM customers;\n\n-- Instead, specify the necessary columns:\nSELECT name, email FROM customers;",
              "code32": "-- Select only the necessary columns to improve efficiency\nSELECT CustomerID, Name\nFROM Customers\nWHERE Active = 1;"
			},
            {
                "id": "965616F3-863A-4ED2-A861-844AECFA8702",
                "name": "C#",
                "miniDescription": "Versatile, object-oriented, for Windows and web applications.",
                "restrictions": ["I", "D"],
                "ask1": "Follow C# style guidelines",
                "ask2": "Efficient use of classes, methods, and properties",
                "ask3": "Efficient exception handling",
                "ask4": "Use of collections and LINQ",
                "ask5": "Modularization and code reuse",
                "ask6": "Object-oriented programming",
                "ask7": "Use of design patterns",
                "ask8": "Efficient use of nullable types",
                "ask9": "Efficient use of resources",
                "ask10": "Concurrency and parallelism management",
                "ask11": "Best practices with lambda expressions and delegates",
                "ask12": "Unit testing and code coverage",
                "ask13": "Use of comments and XML documentation",
                "ask14": "Dependency management with NuGet",
                "ask15": "Security and validation",
                "ask16": "Proper use of async and await for asynchronous programming",
                "q1": "Class and method naming:\nClasses should use PascalCase and methods should also.\n\nExample:\n- CustomerService\n- CalculateTotal().",
                "q2": "Variables and parameters:\nUse camelCase for local variables, parameters, and private fields. Example:\nint productCount.",
                "q3": "Small and specialized methods:\nMethods should have a single responsibility (single responsibility principle). If a method has multiple responsibilities, split it into several smaller methods.",
                "q4": "Use properties instead of public fields:\nUse properties (get/set) to access the internal data of classes. This maintains the encapsulation principle.",
                "q5": "Handle exceptions properly:\nUse try-catch only when necessary and catch specific exceptions rather than catch (Exception e).",
                "q6": "Creating custom exceptions:\nDefine custom exceptions when you need to handle specific situations in your application.",
                "q7": "Choose the right collection:\nUse List, Dictionary, Queue, Stack, HashSet, etc., depending on the use case. For example, use a Dictionary when you need key-value mappings.",
                "q8": "Use LINQ for efficient queries:\nLINQ simplifies queries on collections and improves readability. Avoid unnecessary loops when you can use LINQ.",
                "q9": "Separation of concerns (SoC):\nDivide the logic of the code into layers (for example, presentation, business logic, and data access) so that each part has a single responsibility.",
                "q10": "Use of interfaces and abstraction:\nDefine interfaces to allow for reuse and flexibility in implementation. Use abstraction when specific details are not necessary for the code user.",
                "q11": "Encapsulation:\nKeep data private and provide controlled access through methods and properties.",
                "q12": "Composition over inheritance:\nWhenever possible, prefer composition to inheritance, i.e., create smaller classes that collaborate with each other instead of creating deep inheritance hierarchies.",
                "q13": "Singleton:\nUse the “Singleton” pattern to ensure that a class has only one instance. Make sure it is “thread-safe” if used in a concurrent environment.",
                "q14": "Factory and Dependency Injection:\nUse the “Factory” pattern to create instances of objects and “Dependency Injection” to improve flexibility and maintainability of code.",
                "q15": "Avoid null reference errors:\nUse operators like “?.” (null conditional) to avoid null reference exceptions.",
                "q16": "Null coalescing operator (”??”):\nUse “??” to provide a default value when a variable may be null.",
                "q17": "Using pattern:\nUse the “using” block to handle automatic resource release for objects that implement the “IDisposable” interface (such as database connections, files, etc.).",
                "q18": "Resource disposal:\nEnsure that objects consuming resources (like database connections or streams) are closed or released appropriately.",
                "q19": "Tasks and “async/await”:\nUse “Task” and “async/await” to perform asynchronous tasks without blocking the main thread. This is especially useful in applications that require high responsiveness like web or desktop applications.",
                "q20": "Multi-threading:\nUse TPL (Task Parallel Library) or PLINQ to parallelize tasks without explicitly managing threads. Avoid manually handling threads if not necessary.",
                "q21": "Delegates and Func/Action:\nUse lambda expressions when you need to pass functions as parameters to other methods, or use the “Func<>” and “Action<>” types to simplify code.",
                "q22": "Lambda expressions:\nLambda expressions allow you to define anonymous functions concisely. Using lambdas improves readability and simplifies operations on collections, especially for filtering and transformation.",
                "q23": "Unit tests:\nUse frameworks like “NUnit” or “xUnit” to create unit tests that ensure your code works correctly in isolation.",
                "q24": "Mocking:\nUse mocking frameworks like “Moq” to simulate dependencies and test your code independently.",
                "q25": "Document with XML:\nUse XML documentation comments (”///”) to describe classes, methods, parameters, and return types. This not only improves readability but can also be used to generate documentation.",
                "q26": "Clear comments:\nHelp other developers understand the logic and purpose of code sections. It is important that comments are concise and relevant, avoiding obvious explanations.",
                "q27": "Use of NuGet packages:\nUse “NuGet” to manage dependencies and external libraries. Properly define the versions of dependencies to avoid compatibility issues.",
                "q28": "Dependency updates:\nKeep your NuGet packages up to date, especially when it comes to security updates.",
                "q29": "Use of safe libraries:\nUse trusted libraries to handle tasks like cryptography or authentication.",
                "q30": "Input validation:\nAlways validate user input to avoid attacks like SQL injection or XSS.",
                "q31": "Optimization of asynchronous tasks:\nIn C#, using “async” and “await” allows for performing tasks that involve input/output operations (like database or network calls) without blocking the main thread. This improves the performance of applications that require multiple concurrent operations without blocking the user interface or main application flow.",
                "q32": "Avoid thread blocking:\nUsing async and await correctly prevents thread blocking, improving efficiency and responsiveness, especially in graphical user interface applications or high-performance web services.",
                "code1": "class ClientService {\npublic:\n    void CalculateTotal() {\n        // Logic to calculate the total\n    }\n};\n\nint main() {\n    ClientService service;\n    service.CalculateTotal();\n    return 0;\n}",
                "code2": "void calculateTotal(int productQuantity) {\n    int pricePerProduct = 20;\n    int total = productQuantity * pricePerProduct;\n    // Logic to handle the total\n}\n\nint main() {\n    int productQuantity = 5;\n    calculateTotal(productQuantity);\n    return 0;\n}",
                "code3": "class Order {\npublic:\n    void calculateTotal() {\n        double total = getSubtotal();\n        double taxes = calculateTaxes(total);\n        double finalTotal = total + taxes;\n        // Logic to handle the final total\n    }\n\nprivate:\n    double getSubtotal() {\n        // Logic to calculate the subtotal\n        return 100.0; // Example\n    }\n\n    double calculateTaxes(double subtotal) {\n        return subtotal * 0.21; // Example of taxes\n    }\n};",
                "code4": "public class Person {  \n    public string Name { get; set; }  \n    private int age;\n\n    public int Age {  \n        get { return age; }  \n        set {  \n            if (value > 0) age = value;  \n        }  \n    }\n}",
                "code5": "try {  \n    var number = int.Parse(\"abc\");\n} catch (FormatException ex) {  \n    Console.WriteLine(\"Error: the format is not correct.\");\n}",
                "code6": "public class MyCustomException : Exception {  \n    public MyCustomException(string message) : base(message) { }\n}",
                "code7": "using System;\nusing System.Collections.Generic;\n\nclass CollectionsExample {\n    public void Show() {\n        // Dictionary for key-value mappings\n        var ages = new Dictionary<string, int> { { \"Juan\", 30 }, { \"María\", 25 } };\n        \n        // List for an ordered list\n        var names = new List<string> { \"Juan\", \"María\" };\n        \n        // Accessing a Dictionary\n        Console.WriteLine($\"Age of Juan: {ages[\\\"Juan\\\"]}\");\n    }\n}",
                "code8": "var names = new List<string> { \"Juan\", \"Pedro\", \"Maria\" };  \nvar namesWithM = names.Where(n => n.StartsWith(\"M\"));",
                "code9": "// Data access\npublic class Repository {\n    public void GetData() { /*...*/ }\n}\n\n// Business logic\npublic class Service {\n    private readonly Repository _repository = new Repository();\n    public void ProcessData() { _repository.GetData(); }\n}\n\n// Presentation\npublic class Controller {\n    private readonly Service _service = new Service();\n    public void ShowData() { _service.ProcessData(); }\n}",
                "code10": "// Interface definition\npublic interface IVehicle {\n    void Drive();\n}\n\n// Interface implementation\npublic class Car : IVehicle {\n    public void Drive() { /* Method implementation */ }\n}\n\npublic class Motorcycle : IVehicle {\n    public void Drive() { /* Method implementation */ }\n}\n\n// Using the interface\npublic class Workshop {\n    public void Repair(IVehicle vehicle) {\n        vehicle.Drive(); // Calls the method without worrying about the implementation\n    }\n}",
                "code11": "public class BankAccount {\n    private decimal balance; // Private data\n\n    // Method to deposit\n    public void Deposit(decimal amount) {\n        if (amount > 0) {\n            balance += amount;\n        }\n    }\n\n    // Method to get the balance\n    public decimal GetBalance() {\n        return balance; // Controlled access\n    }\n}\n\n// Using the class\nvar account = new BankAccount();\naccount.Deposit(100);\ndecimal currentBalance = account.GetBalance();",
                "code12": "public class Engine {\n    public void Start() {}\n}\n\npublic class Car {\n    private Engine engine = new Engine(); // Composition\n\n    public void Drive() {\n        engine.Start();\n    }\n}\n\n// Usage\nvar car = new Car();\ncar.Drive();",
                "code13": "public class Singleton {  \n    private static Singleton instance = null;  \n    private static readonly object lockObj = new object();  \n  \n    private Singleton() { }  \n  \n    public static Singleton Instance {  \n        get {  \n            lock (lockObj) {  \n                if (instance == null) {  \n                    instance = new Singleton();  \n                }  \n                return instance;  \n            }  \n        }  \n    }  \n}",
                "code14": "// Interface\npublic interface IVehicle {\n    void Drive();\n}\n\n// Concrete class\npublic class Car : IVehicle {\n    public void Drive() { /* Driving logic */ }\n}\n\n// Factory\npublic class VehicleFactory {\n    public IVehicle CreateVehicle() => new Car();\n}\n\n// Usage\nvar vehicle = new VehicleFactory().CreateVehicle();\nvehicle.Drive();",
                "code15": "string name = person?.Name;",
                "code16": "string name = person?.Name ?? \"Unknown\";",
                "code17": "using (var file = new StreamReader(\"file.txt\")) {  \n    string content = file.ReadToEnd();\n}",
                "code18": "using (var connection = new SqlConnection(\"connection_string\")) {\n    connection.Open();\n    // Logic for using the connection\n} // The connection is automatically closed when exiting the block",
                "code19": "public async Task<int> GetDataAsync() { \n    await Task.Delay(1000);\n    return 42;\n}",
                "code20": "Parallel.For(0, 10, i => {\n    // Logic for each task\n    Console.WriteLine($\"Task {i}\");\n});",
                "code21": "Func<int, int, int> add = (a, b) => a + b;\nConsole.WriteLine(add(2, 3)); // Result: 5",
                "code22": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main()\n    {\n        List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };\n\n        // Filter even numbers\n        var evens = numbers.Where(n => n % 2 == 0).ToList();\n\n        Console.WriteLine(\"Even numbers: \" + string.Join(\", \", evens)); // Output: Even numbers: 2, 4\n    }\n}",
                "code23": "[Test]\npublic void Add_TwoNumbers_ReturnsCorrectResult() {\n    // Arrange\n    var calculator = new Calculator();\n    \n    // Act\n    var result = calculator.Add(2, 3);\n    \n    // Assert\n    Assert.AreEqual(5, result);\n}",
                "code24": "var mockService = new Mock<IService>();\nmockService.Setup(s => s.GetData()).Returns(new List<string> { \"data1\", \"data2\" });\n\nvar controller = new Controller(mockService.Object);\nvar result = controller.ShowData();\n\nAssert.AreEqual(\"data1\", result.First());",
                "code25": "/// <summary>\n/// Calculates the area of a circle given its radius.\n/// </summary>\n/// <param name=\"radius\">Radius of the circle.</param>\n/// <returns>The calculated area.</returns>\npublic double CalculateArea(double radius) {\n    return Math.PI * radius * radius;\n}",
                "code26": "public class Calculator {\n    // Adds two numbers\n    public int Add(int a, int b) => a + b;\n\n    // Subtracts two numbers\n    public int Subtract(int a, int b) => a - b;\n}\n\npublic class Program {\n    public static void Main() {\n        var calc = new Calculator();\n        Console.WriteLine(\"Sum: \" + calc.Add(5, 3)); // Output: Sum: 8\n    }\n}",
                "code27": "<PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />",
                "code28": "dotnet outdated",
                "code29": "use System.Text.RegularExpressions;\n\n// Example of input validation to prevent XSS\npublic bool IsInputValid(string input)\n{\n    // Avoid special characters to prevent XSS\n    string pattern = @\"^[a-zA-Z0-9]*$\";\n    return Regex.IsMatch(input, pattern);\n}",
                "code30": "use System.Security.Cryptography;\n\n// Example of using a secure library to generate a hash\npublic string GenerateHash(string text)\n{\n    using (var sha256 = SHA256.Create())\n    {\n        byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(text));\n        return Convert.ToBase64String(bytes);\n    }\n}",
                "code31": "using System;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        Console.WriteLine(\"Starting asynchronous task...\");\n        string result = await GetResultAsync();\n        Console.WriteLine(result);\n    }\n\n    static async Task<string> GetResultAsync()\n    {\n        await Task.Delay(2000); // Simulating a long-running operation\n        return \"Task completed\";\n    }\n}",
                "code32": "use System.Net.Http;\nusing System.Threading.Tasks;\n\n// Asynchronous method that prevents thread blocking\npublic async Task<string> GetDataAsync(string url)\n{\n    using HttpClient client = new HttpClient();\n    // Avoids blocking the thread while waiting for the response\n    return await client.GetStringAsync(url);\n}"
            },
		]
	},
	{
		"name": "Scripting and Automation Languages",
        "id": "1C89DAFD-7653-4EF2-BF20-C51A159BAC43",
		"items": [
            {
                "id": "CFB8C2DB-3478-4A10-92FA-3D2A2D5324FB",
                "name": "Python",
                "miniDescription": "Versatile, easy, and multipurpose language.",
                "restrictions": ["E"],
                "ask1": "Follow The Python Philosophy (Zen Of Python)",
                "ask2": "Code Readability",
                "ask3": "Follow PEP 8 (Python style guide)",
                "ask4": "Proper use of variables and data types",
                "ask5": "Proper use of functions",
                "ask6": "Avoid repeated code (DRY - Don’t Repeat Yourself)",
                "ask7": "Efficient exception handling",
                "ask8": "List comprehensions and generators",
                "ask9": "Efficient file and resource management",
                "ask10": "Testing and debugging",
                "ask11": "Dependency management",
                "ask12": "Performance optimization",
                "ask13": "Project documentation",
                "ask14": "Follow conventions",
                "ask15": "Security",
                "ask16": "Concurrency and parallelism management",
                "q1": "Python has its own philosophy called the Zen of Python, which contains important guidelines for writing quality Python code. Some of the most notable principles are: readability counts, explicit is better than implicit, simple is better than complex, and exceptions should not pass silently (unless they are handled). You can see these principles by typing 'import this' in the Python console.",
                "q2": "Helpful comments:\nComment only where necessary to explain why something is done, not what the code does.",
                "q3": "Use descriptive names:\nAssign clear and meaningful names to variables, functions, classes, and modules. Avoid cryptic abbreviations.",
                "q4": "Useful comments:\nComment only where necessary to explain the why of something, not the what the code does.",
                "q5": "Indentation:\nUse 4 spaces per indentation level. Do not use tabs.",
                "q6": "Spacing around operators:\nLeave a space around operators (=, +, -, etc.) to improve readability.",
                "q7": "Dynamic typing and optional static typing:\nAlthough Python is dynamically typed, you can use type hints to specify expected types in functions and variables, which improves clarity and eases maintenance.",
                "q8": "Efficient collection handling:\nUse the appropriate data structures (list, set, dict, tuple) as needed to optimize performance and code clarity.",
                "q9": "Small and focused functions:\nEach function should have a single responsibility (Single Responsibility Principle). Avoid large, monolithic functions.",
                "q10": "Use default parameters and keyword arguments:\nUse default values and named arguments to improve the flexibility and clarity of functions.",
                "q11": "Modularization:\nBreak the code into reusable functions and modules to avoid logic duplication.",
                "q12": "Use of classes and inheritance:\nUtilize object-oriented programming when appropriate to encapsulate behavior and avoid code repetition.",
                "q13": "Use try-except to handle errors:\nAlways handle potential errors with try-except blocks. Avoid letting exceptions go unnoticed.",
                "q14": "Use finally for cleanup:\nIf you have code that needs to run regardless of whether an exception occurs, place it in a finally block.",
                "q15": "List comprehensions:\nUse list comprehensions to create new lists concisely and efficiently.",
                "q16": "Generators:\nUse generators (yield) to handle large amounts of data more efficiently without loading everything into memory.",
                "q17": "Use with to handle files:\nUse the with statement to open files and ensure they are properly closed.",
                "q18": "Context managers:\nCreate your own context managers when you need to ensure that certain resources are properly released after use.",
                "q19": "Unit tests:\nUse the unittest module or frameworks like pytest to create unit tests that ensure your code works correctly.",
                "q20": "Debugging:\nUse pdb or built-in debugging tools in your code editor (like PyCharm or VSCode) to trace errors efficiently.",
                "q21": "Virtual environments:\nUse virtualenv or venv to isolate dependencies for each project. This prevents conflicts between library versions.",
                "q22": "Requirements files or Pipfile:\nDocument project dependencies in a requirements.txt file or use Pipenv to manage dependencies efficiently.",
                "q23": "Avoid nested loops and inefficient code:\nTry to reduce the temporal and spatial complexity of your code. Use Python's native functions, such as map, filter, and reduce, when possible.",
                "q24": "Profile the code:\nUse tools like cProfile or timeit to analyze the performance of your code and identify bottlenecks.",
                "q25": "Document your project with README and docstrings:\nUse a README.md file to describe the purpose of the project, installation and usage instructions. Additionally, document your modules and functions using docstrings.",
                "q26": "Generate automatic documentation:\nUse tools like Sphinx to generate HTML documentation from docstrings.",
                "q27": "Style conventions and linting tools:\nUse linters like pylint or flake8 to ensure your code adheres to style conventions and is free from potential errors.",
                "q28": "Code formatters:\nUse tools like black or autopep8 to automatically format your code according to PEP 8.",
                "q29": "Avoid the use of dangerous dynamic code:\nDo not use eval() or exec() unless absolutely necessary, as they can be vulnerable to attacks.",
                "q30": "Escape user inputs:\nAlways validate and escape user inputs, especially in web applications, to prevent attacks such as code injection.",
                "q31": "Use asyncio and concurrent.futures when necessary:\nTo improve performance in programs that require intensive input/output operations or when you need to handle multiple tasks at once, use asyncio for asynchronous programming or concurrent.futures for parallelism.",
                "q32": "Avoid blocking the main thread:\nProper use of these mechanisms allows your code to be more efficient without blocking the main flow of the program, improving performance in applications with many concurrent requests, such as web servers.",
                "code1": "def calculate_rectangle_area(base, height):\n    \"\"\"Calculates the area of a rectangle.\"\"\"\n    return base * height\n\n# Using the function with explicit names\nbase = 5\nheight = 3\narea = calculate_rectangle_area(base, height)\n\nprint(f\"The area of the rectangle is: {area}\")  # Output: The area of the rectangle is: 15",
                "code2": "def divide(a, b):\n    \"\"\"Divides two numbers and handles the exception if b is zero.\"\"\"\n    if b == 0:\n        raise ValueError(\"Error: Cannot divide by zero.\")\n    return a / b\n\n# Using the function\ntry:\n    result = divide(10, 0)  # Attempting to divide by zero\nexcept ValueError as e:\n    print(e)  # Output: Error: Cannot divide by zero.\nelse:\n    print(f\"Result: {result}\")",
                "code3": "# Descriptive name\ndef calculate_rectangle_area(width, height):\n    return width * height",
                "code4": "def calculate_rectangle_area(width, height):\n    \"\"\"\n    Calculates the area of a rectangle.\n    \n    :param width: Width of the rectangle.\n    :param height: Height of the rectangle.\n    :return: Area of the rectangle.\n    \"\"\"\n    return width * height",
                "code5": "def my_function():\n    x = 10\n    y = 20\n    return x + y",
                "code6": "sum = a + b\nproduct = a * b",
                "code7": "def add_numbers(a: int, b: int) -> int:\n    return a + b",
                "code8": "# Use set for unique values\nunique_values = set([1, 2, 2, 3, 4])",
                "code9": "def calculate_circle_area(radius):\n    return 3.14159 * radius ** 2",
                "code10": "def greet(name=\"World\"):\n    print(f\"Hello, {name}\")",
                "code11": "# File: operations.py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b\n\n# Main file\nfrom operations import add, subtract\n\nresult = add(5, 3)",
                "code12": "class Animal:\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Woof\"",
                "code13": "try:\n    x = int(input(\"Enter a number: \"))\nexcept ValueError:\n    print(\"That's not a valid number.\")",
                "code14": "try:\n    file = open('file.txt', 'r')\n    content = file.read()\nfinally:\n    file.close()",
                "code15": "squares = [x**2 for x in range(10)]",
                "code16": "def count_up_to(max):\n    count = 1\n    while count <= max:\n        yield count\n        count += 1",
                "code17": "with open('file.txt', 'r') as file:\n    content = file.read()",
                "code18": "from contextlib import contextmanager\n\n@contextmanager\ndef open_file(name):\n    file = open(name, 'r')\n    try:\n        yield file\n    finally:\n        file.close()\n\nwith open_file('file.txt') as file:\n    content = file.read()",
                "code19": "import unittest\n\ndef add(a, b):\n    return a + b\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(-1, 1), 0)\n\nif __name__ == '__main__':\n    unittest.main()",
                "code20": "import pdb\n\ndef divide(a, b):\n    pdb.set_trace()  # Add a breakpoint here\n    return a / b",
                "code21": "# Create a virtual environment\npython -m venv my_environment\n\n# Activate the virtual environment\nsource my_environment/bin/activate  # On Windows: my_environment\\Scripts\\activate",
                "code22": "pip freeze > requirements.txt",
                "code23": "flat_list = [element for row in matrix for element in row]",
                "code24": "import cProfile\n\ndef slow_function():\n    pass\n\ncProfile.run('slow_function()')",
                "code25": "# My Project\n\nThis project performs calculations.\n\n## Installation",
                "code26": "# Install Sphinx\npip install sphinx\n\n# Initialize Sphinx\nsphinx-quickstart",
                "code27": "# Install flake8\npip install flake8\n\n# Run flake8\nflake8 my_code.py",
                "code28": "# Install black\npip install black\n\n# Format code with black\nblack mi_codigo.py",
                "code29": "# Don't use eval() if possible\n# eval(\"print('Hello')\")",
                "code30": "import html\n\ndef escape_html(text):\n    return html.escape(text)",
                "code31": "import asyncio\n\nasync def slow_task():\n    await asyncio.sleep(2)\n    return \"Task completed\"\n\nasync def main():\n    print(\"Iniciating task...\")\n    result = await slow_task()\n    print(result)\n\nasyncio.run(main())",
                "code32": "import asyncio\n\nasync def task():\n    await asyncio.sleep(1)\n    print(\"Task completed\")\n\nasync def main():\n    await asyncio.gather(task(), task())\n\n# Run the main function\nasyncio.run(main())"
            },
            {
                "id": "8903A204-F5C1-4D5C-A0A1-5C0ECD27FDD7",
                "name": "JavaScript",
                "miniDescription": "Language for interactive web programming.",
                "restrictions": ["E", "I"],
                "ask1": "Good syntax practices",
                "ask2": "Declaration of variables and constants",
                "ask3": "Modularity and code reuse",
                "ask4": "Clear separation of responsibilities",
                "ask5": "Efficient use of functions",
                "ask6": "Flow control and conditionals",
                "ask7": "Error handling",
                "ask8": "Asynchrony and promises",
                "ask9": "Efficient DOM management",
                "ask10": "Performance optimization",
                "ask11": "Efficiency in memory management",
                "ask12": "Testing and debugging",
                "ask13": "Readability and maintainability",
                "ask14": "Compatibility and standards",
                "ask15": "Security",
                "ask16": "Use of modern tools",
                "q1": "Meaningful naming:\nUse clear and descriptive names for variables, functions, classes, and constants. They should be easy to understand.",
                "q2": "Use of ; (semicolon):\nAlthough optional in many cases, its explicit use prevents possible errors with Automatic Semicolon Insertion (ASI).",
                "q3": "Use const and let instead of var:\nUse const when the variable will not change its value, and let when reassignment is necessary. Avoid using var, as it can lead to scope issues.",
                "q4": "Early declaration:\nDeclare variables and constants at the beginning of blocks for clarity and to avoid possible errors.",
                "q5": "Reusable functions:\nBreak the code into small, reusable functions instead of having monolithic functions.",
                "q6": "Modularization:\nUse modules (import/export) to separate functionalities into different files and promote reusability.",
                "q7": "Single Responsibility Principle (SRP):\nEnsure that each function, class, or module has a single responsibility, making the code easier to maintain and modify.",
                "q8": "Design patterns:\nUse patterns like MVC (Model-View-Controller) or MVVM to organize your code, especially in large projects.",
                "q9": "Pure functions:\nWhen possible, use pure functions, meaning those that have no side effects and always return the same result for the same arguments.",
                "q10": "Arrow functions (=>):\nUse arrow functions when you need to preserve the value of this, or when you have small and simple functions.",
                "q11": "Avoid nested conditions:\nUse flat conditions or early returns instead of nested conditionals to avoid complexity.",
                "q12": "Switch and guard clauses:\nUse switch to handle multiple cases, and guard clauses (early return) to improve function readability.",
                "q13": "Use try-catch:\nUse try-catch blocks to handle errors robustly, especially in asynchronous operations or code that may fail.",
                "q14": "Data validation:\nValidate input parameters in functions and ensure to handle invalid values.",
                "q15": "Use async and await:\nSince ES6, prefer using async/await to handle asynchronous code instead of promises or callbacks, which simplifies error handling and improves readability.",
                "q16": "Error handling in promises:\nAlways ensure to catch errors with .catch() in promises and use try-catch when working with async/await.",
                "q17": "Minimize direct DOM manipulation:\nInteracting with the DOM is costly, so it is advisable to minimize the number of accesses or changes.",
                "q18": "Event delegation:\nInstead of assigning events to multiple elements individually, use event delegation by assigning the event to a container element.",
                "q19": "Avoid unnecessary loops:\nUse methods like map(), filter(), and reduce() instead of for or while when appropriate, as they are more declarative and expressive.",
                "q20": "Debouncing and Throttling:\nImplement debouncing or throttling on intensive events like scroll or resize to improve performance.",
                "q21": "Avoid memory leaks:\nEnsure to clean up unused events or references, especially in long-running applications (e.g., removing event listeners).",
                "q22": "Object lifecycle management:\nUse objects and their references correctly, avoiding keeping unnecessary objects in memory.",
                "q23": "Write unit tests:\nUse frameworks like Jest or Mocha to write automated tests that ensure your code works as expected.",
                "q24": "Use debugging tools:\nTake advantage of debugging tools in browsers or development environments like Chrome DevTools or Visual Studio Code.",
                "q25": "Clear and precise comments:\nComment only when necessary to explain the why of a decision in the code, not the what it does.",
                "q26": "Documentation:\nUse JSDoc or similar tools to document functions, classes, and parameters clearly.",
                "q27": "Transpiling with Babel:\nUse Babel to ensure your code is compatible with older versions of browsers or environments that do not support the latest ECMAScript features.",
                "q28": "Polyfills:\nUse polyfills to provide support for functionalities not implemented in older browsers.",
                "q29": "Avoid using eval():\neval() can be dangerous as it executes dynamic code and can open security vulnerabilities.",
                "q30": "Escaping user input:\nAlways escape user input to prevent injection attacks like XSS (Cross-Site Scripting).",
                "q31": "NPM and Node.js:\nLeverage the NPM ecosystem to manage dependencies and modules, and use Node.js to run JavaScript on the server side.",
                "q32": "Webpack or Parcel:\nUse module bundlers like Webpack or Parcel to efficiently manage the loading of your application’s resources.",
                "code1": "// Descriptive names and consistent indentation\nfunction calculateRectangleArea(width, height) {\n    return width * height;\n}\n\n// Function call with clear variables\nconst rectangleWidth = 5;\nconst rectangleHeight = 10;\nconst area = calculateRectangleArea(rectangleWidth, rectangleHeight);\nconsole.log(`The area is ${area}`);",
                "code2": "const greeting = \"Hello\";\nconsole.log(greeting); // Explicit use of semicolon",
                "code3": "const PI = 3.14159; // Constant\nlet radius = 5;     // Variable that can change\nradius = 10;",
                "code4": "function calculateCircumference(radius) {\n    const PI = 3.14159;\n    return 2 * PI * radius;\n}",
                "code5": "// File math.js\nimport { sum } from './math.js';\n\nconst result = sum(2, 3);\nconsole.log(`The sum is ${result}`);",
                "code6": "export function sum(a, b) {\n    return a + b;\n}",
                "code7": "class User {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    showInfo() {\n        return `${this.name} is ${this.age} years old`;\n    }\n}\n\nconst user = new User(\"Ana\", 30);\nconsole.log(user.showInfo());",
                "code8": "// Model model.js\nexport class User {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\n// ---\n\n// View view.js\n\nexport function showUser(user) {\n    console.log(`${user.name} is ${user.age} years old`);\n}\n\n// ---\n\n// Controller controller.js\n\nimport { User } from './model.js';\nimport { showUser } from './view.js';\n\nconst user = new User(\"Ana\", 30);\nshowUser(user);",
                "code9": "function multiply(a, b) {\n    return a * b; // Has no side effects\n}\n\nconst result = multiply(3, 4);\nconsole.log(`The product is ${result}`);",
                "code10": "const add = (a, b) => a + b;\nconsole.log(`The sum is ${add(5, 6)}`);",
                "code11": "function getAgeCategory(age) {\n    if (age < 0) {\n        throw new Error(\"Age cannot be negative\");\n    }\n    if (age < 18) {\n        return \"Minor\";\n    }\n    if (age < 65) {\n        return \"Adult\";\n    }\n    return \"Senior\";\n}",
                "code12": "function getDayName(day) {\n    switch (day) {\n        case 1: return \"Monday\";\n        case 2: return \"Tuesday\";\n        case 3: return \"Wednesday\";\n        case 4: return \"Thursday\";\n        case 5: return \"Friday\";\n        case 6: return \"Saturday\";\n        case 7: return \"Sunday\";\n        default: return \"Invalid day\";\n    }\n}\n\nconsole.log(getDayName(3)); // Wednesday",
                "code13": "try {\n    const result = JSON.parse(\"invalid text\"); // Will throw an error\n} catch (error) {\n    console.error(\"Error parsing JSON:\", error);\n}",
                "code14": "function divide(a, b) {\n    if (b === 0) {\n        throw new Error(\"Cannot divide by zero\");\n    }\n    return a / b;\n}\n\ntry {\n    console.log(divide(10, 2)); // 5\n    console.log(divide(10, 0)); // Error\n} catch (error) {\n    console.error(error.message);\n}",
                "code15": "async function fetchData() {\n    return \"Data received\";\n}\n\nasync function processData() {\n    try {\n        const data = await fetchData();\n        console.log(data);\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n}\n\nprocessData();",
                "code16": "function fetchData() {\n    return new Promise((resolve, reject) => {\n        // Simulating an asynchronous operation\n        setTimeout(() => reject(new Error(\"Error fetching data\")), 1000);\n    });\n}\n\nfetchData()\n    .then(data => console.log(data))\n    .catch(error => console.error(\"Error:\", error));",
                "code17": "// Crear un fragmento de documento para evitar múltiples redibujos del DOM\nconst fragmento = document.createDocumentFragment();\nconst ul = document.createElement('ul');\n\nfor (let i = 0; i < 5; i++) {\n    const li = document.createElement('li');\n    li.textContent = `Elemento ${i}`;\n    fragmento.appendChild(li);\n}\n\nul.appendChild(fragmento);\ndocument.body.appendChild(ul);",
                "code18": "document.addEventListener('click', (event) => {\n    if (event.target.matches('.btn')) {\n        console.log('Botón clicado');\n    }\n});",
                "code19": "const numbers = [1, 2, 3, 4, 5];\nconst doubles = numbers.map(num => num * 2);\nconsole.log(doubles); // [2, 4, 6, 8, 10]",
                "code20": "// Debounce\nfunction debounce(func, delay) {\n    let timeout;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n}\n\nwindow.addEventListener('resize', debounce(() => {\n    console.log('Resized');\n}, 300));",
                "code21": "function createElement() {\n    const button = document.createElement('button');\n    button.textContent = 'Delete';\n    button.addEventListener('click', () => {\n        button.remove(); // Cleaning up the DOM\n    });\n    document.body.appendChild(button);\n}\n\ncreateElement();",
                "code22": "let object = { name: \"Example\" }; // Clear references\nobject = null;",
                "code23": "// File suma.js\nfunction sum(a, b) {\n    return a + b;\n}\n\nmodule.exports = sum;\n\n// File suma.test.js\nconst sum = require('./suma');\n\ntest('sum 1 + 2 is 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});",
                "code24": "// You can use `debugger` to set a breakpoint\nfunction sum(a, b) {\n    debugger; // Pause here to inspect variables\n    return a + b;\n}\n\nsum(1, 2);",
                "code25": "// Calculates the area of a rectangle\nfunction calculateArea(width, height) {\n    return width * height;\n}",
                "code26": "/**\n * Sums two numbers.\n * @param {number} a - First number.\n * @param {number} b - Second number.\n * @returns {number} - The sum of `a` and `b`.\n */\nfunction sum(a, b) {\n    return a + b;\n}",
                "code27": "# Install Babel\nnpm install @babel/core @babel/cli @babel/preset-env --save-dev\n\n# Configure Babel in .babelrc\n{\n  \"presets\": [\"@babel/preset-env\"]\n}",
                "code28": "// Import polyfill for `fetch`\nimport 'whatwg-fetch';",
                "code29": "// Do not use `eval` to execute dynamic code\n// Example of unsafe code\n// eval('console.log(\"Hello\")');",
                "code30": "// Simplified escape example\nfunction escapeHtml(text) {\n    return text.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}",
                "code31": "# Initialize a Node.js project\nnpm init -y",
                "code32": "# Install Webpack\nnpm install --save-dev webpack webpack-cli\n\n# Configuration in webpack.config.js\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: __dirname + '/dist'\n    }\n};"
            },
            {
                "id": "82B28AFF-BB29-4186-AA07-04959180D81A",
                "name": "PHP",
                "miniDescription": "Web backend, dynamic and simple.",
                "restrictions": ["E", "I"],
                "ask1": "Follow style and naming conventions",
                "ask2": "Modularization and code reusability",
                "ask3": "Avoid mixing logic and presentation",
                "ask4": "Proper use of variables and constants",
                "ask5": "Data validation and sanitization",
                "ask6": "Safe database handling",
                "ask7": "Avoid using obsolete code",
                "ask8": "Efficient exception and error handling",
                "ask9": "Performance optimization",
                "ask10": "Security in PHP",
                "ask11": "Use of Composer for dependency management",
                "ask12": "Writing unit tests",
                "ask13": "Proper use of versions",
                "ask14": "Comply with security recommendations",
                "ask15": "Use of strict typing",
                "ask16": "Use of namespaces",
                "q1": "Descriptive names:\nUse descriptive and clear names for variables and functions. Avoid confusing abbreviations and cryptic names.",
                "q2": "Consistent code style:\nFollow a coding convention like PSR-12 (PHP Standards Recommendations) that promotes uniform code style. Use camelCase for variables and methods, PascalCase for classes, and 4 spaces for indentation.",
                "q3": "Small and concise functions:\nEach function should have a single responsibility and do just one thing. This improves readability and makes unit testing easier.",
                "q4": "Proper use of classes and objects:\nPHP is an object-oriented language, so you should organize your code into classes where appropriate, utilizing concepts like inheritance, encapsulation, and composition.",
                "q5": "MVC (Model-View-Controller):\nImplement the MVC pattern to separate business logic, presentation layer, and database interaction. Use frameworks like Laravel or Symfony that implement this pattern.",
                "q6": "Template systems for views:\nUse template systems like Blade (in Laravel) or Twig to keep logic out of your views.",
                "q7": "Local variables:\nDeclare variables in the smallest possible scope to reduce the risk of name conflicts.",
                "q8": "Constants:\nUse define or const to declare values that won't change throughout the program. Since PHP 5.3+, it's recommended to use const within classes.",
                "q9": "Input validation:\nAlways validate user input. Use specific filters and functions like filter_var() to ensure data is of the expected type (integers, emails, URLs, etc.).",
                "q10": "Sanitizing data:\nClean input data to prevent attacks such as Cross-Site Scripting (XSS) or SQL injection. Use htmlspecialchars() to escape output in views.",
                "q11": "Use prepared statements:\nSecure your database queries by using prepared statements with PDO or mysqli to prevent SQL injection.",
                "q12": "Properly escape data:\nIf you cannot use prepared statements, escape input data using mysqli_real_escape_string() or equivalent functions.",
                "q13": "Avoid deprecated functions:\nKeep up with the latest PHP versions and avoid using obsolete functions like mysql_* in favor of mysqli or PDO.",
                "q14": "Avoid eval():\nUnless absolutely necessary, avoid eval() as it introduces critical vulnerabilities by executing arbitrary code.",
                "q15": "Proper error handling:\nConfigure error reporting appropriately for development and production environments. In development, use error_reporting(E_ALL) to display all errors, and hide them in production using display_errors = Off.",
                "q16": "Exceptions:\nUse exceptions to handle critical errors. Avoid using die() or exit() to abruptly stop program execution.",
                "q17": "Use require_once and include_once:\nUse require_once or include_once to avoid multiple file inclusions, which can cause errors and reduce performance.",
                "q18": "Optimize autoload:\nUse spl_autoload_register() or Composer's autoloader to load classes automatically when needed.",
                "q19": "Avoid unsafe file inclusion:\nNever allow users to directly control what files are included. Use safe absolute or relative paths.",
                "q20": "Secure session management:\nUse session_regenerate_id() to prevent session hijacking and store sensitive session data securely.",
                "q21": "Composer:\nUse Composer to manage external dependencies in your project. This makes it easier to install, update, and manage external libraries, ensuring you are using the correct and secure versions of each dependency.",
                "q22": "Autoloading:\nUse Composer's autoloading feature to automatically load classes, avoiding the need to manually write require or include statements.",
                "q23": "PHPUnit:\nUse PHPUnit to write unit tests that verify your code works as expected. Automated tests improve code quality and make it easier to catch bugs.",
                "q24": "Mocking:\nUse mocking to simulate objects and dependencies in your tests. This allows you to isolate the unit you are testing and verify its behavior without relying on external implementations, improving the reliability and speed of your tests.",
                "q25": "Keep the code up to date:\nEnsure that you are using a recent and compatible version of PHP. Older versions may have security vulnerabilities and lack performance improvements.",
                "q26": "Change Control:\nMaintain a clear record of changes in each version using a CHANGELOG. This document should detail new features, improvements, bug fixes, and API changes. A well-structured CHANGELOG allows developers and users to quickly understand what to expect in each version and makes migration to new versions easier.",
                "q27": "Protect against brute-force attacks:\nImplement security measures like limiting login attempts and using secure hashes (e.g., bcrypt or Argon2) for passwords.",
                "q28": "Input Validation and Sanitization:\nAlways validate and sanitize user input to prevent attacks such as SQL injections and XSS (Cross-Site Scripting). Use functions such as filter_var(), htmlspecialchars(), and prepared statements with PDO or MySQLi to ensure that the data entered is safe and processed correctly. This helps protect your application and user data from malicious manipulation.",
                "q29": "Improve code robustness:\nPHP allows strict typing as of version 7, which helps prevent runtime errors by enforcing data type compliance. By enabling strict_types, you ensure function parameters and return values match the defined types.",
                "q30": "Prevent automatic type conversion errors:\nUsing strict typing prevents automatic type conversions, making the code more predictable and reducing errors in functions expecting specific types.",
                "q31": "Avoid name conflicts:\nPHP 5.3 introduced namespaces, allowing you to organize code and avoid naming collisions, especially in large projects or when using many third-party libraries.",
                "q32": "Enhance modularity and maintainability:\nNamespaces help better organize classes and modules, making the code easier to maintain and preventing conflicts when integrating external libraries or working in large teams.",
                "code1": "$fullName = \"Javier Aranda\"; // Clear and descriptive",
                "code2": "<?php\n\n// Class in PascalCase\nclass MyExampleClass\n{\n    // Property in camelCase\n    private $username;\n\n    // Method in camelCase\n    public function setName(string $name): void\n    {\n        $this->username = $name;\n    }\n}",
                "code3": "# Function to calculate the area of a rectangle\ndef calculate_rectangle_area(width, height):\n    return width * height\n\n# Function to calculate the perimeter of a rectangle\ndef calculate_rectangle_perimeter(width, height):\n    return 2 * (width + height)",
                "code4": "class User {\n    private $name;\n    public function __construct($name) {\n        $this->name = $name;\n    }\n    public function getName() {\n        return $this->name;\n    }\n}",
                "code5": "// Model: App/Models/Product.php\nclass Product extends Model {\n    protected $fillable = ['name', 'price', 'quantity'];\n}\n\n// Controller: App/Http/Controllers/ProductController.php\nclass ProductController extends Controller {\n    public function index() {\n        $products = Product::all();\n        return view('products.index', ['products' => $products]);\n    }\n}\n\n// View: resources/views/products/index.blade.php\n@foreach ($products as $product)\n    <p>{{ $product->name }} - ${{ $product->price }}</p>\n@endforeach",
                "code6": "<!-- resources/views/products/list.blade.php -->\n@extends('layouts.app')\n\n@section('content')\n    <h1>Product List</h1>\n    @foreach ($products as $product)\n        <div class=\"product-item\">\n            <h2>{{ $product->name }}</h2>\n            <p>Price: ${{ $product->price }}</p>\n        </div>\n    @endforeach\n@endsection",
                "code7": "// Correct: the variable $total is only visible within the if block\nif ($condition) {\n    $total = $quantity * $price;\n    echo \"Total: $total\";\n}\n\n// Incorrect: the variable $total is in a broader scope than necessary\n$total = 0;\nif ($condition) {\n    $total = $quantity * $price;\n}\necho \"Total: $total\";",
                "code8": "class Config {  \n    const MAX_ATTEMPTS = 5;\n}",
                "code9": "$email = filter_var($email, FILTER_VALIDATE_EMAIL); // Validate email",
                "code10": "$safeName = htmlspecialchars($name, ENT_QUOTES, 'UTF-8'); // Convert special characters to HTML entities",
                "code11": "$stmt = $pdo->prepare('SELECT * FROM users WHERE email = :email');\n$stmt->execute(['email' => $email]);\n$user = $stmt->fetch(); // Fetch the user",
                "code12": "// Correct: Escaping input data\n$name = mysqli_real_escape_string($conn, $_POST['name']);\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysqli_query($conn, $query);\n\n// Incorrect: Input data not escaped, vulnerable to SQL injection\n$name = $_POST['name'];\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysqli_query($conn, $query);",
                "code13": "// Correct: Using PDO to access the database\ntry {\n    $conn = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn->prepare(\"SELECT * FROM users WHERE name = :name\");\n    $stmt->bindParam(':name', $name);\n    $stmt->execute();\n} catch(PDOException $e) {\n    echo \"Error: \" . $e->getMessage();\n}\n\n// Incorrect: Using a deprecated and vulnerable function\n$conn = mysql_connect($host, $username, $password);\nmysql_select_db($dbname, $conn);\n$query = \"SELECT * FROM users WHERE name = '$name'\";\n$result = mysql_query($query, $conn);",
                "code14": "// Incorrect: Using eval() to evaluate dynamic expressions\n$code = 'echo \"Hello, World!\";';\neval($code); // This can execute untrusted code and is risky\n\n// Correct: Safe alternatives to concatenate or process data\n$message = \"Hello, World!\";\necho $message; // Use directly instead of eval()",
                "code15": "// In development:\nini_set('display_errors', 1);\nini_set('display_startup_errors', 1);\nerror_reporting(E_ALL); // Show all errors and warnings\n\n// In production:\nini_set('display_errors', 0);\nini_set('display_startup_errors', 0);\nerror_reporting(0); // Hide all errors from the end user",
                "code16": "try {  \n    // Code that may fail\n} catch (Exception $e) {  \n    echo 'Caught exception: ',  $e->getMessage(), \"\\n\";\n}",
                "code17": "// Ensure the unique inclusion of a configuration file\nrequire_once 'config.php';\n\n// Include helper functions only once\ninclude_once 'helpers.php';",
                "code18": "// Autoloading using spl_autoload_register\nspl_autoload_register(function ($class) {\n    include 'classes/' . $class . '.php'; // Automatically load the class\n});\n\n// Example of usage\n$myObject = new MyClass(); // MyClass is automatically loaded from 'classes/MyClass.php'",
                "code19": "// Bad practice: user-controlled inclusion (vulnerable to attacks)\ninclude $_GET['file'];\n\n// Good practice: using safe and controlled paths\ninclude 'includes/safe.php';",
                "code20": "session_start(); // Start the session\n\n// Regenerate the session ID to prevent session hijacking\nsession_regenerate_id(true);\n\n// Store sensitive data securely\n$_SESSION['user'] = 'username';\n$_SESSION['role'] = 'admin'; // Example user role",
                "code21": "composer require monolog/monolog",
                "code22": "<?php\n// src/User.php\nnamespace App;\n\nclass User {\n    public function greet() {\n        return \"Hello, user!\";\n    }\n}\n\n// index.php\nrequire 'vendor/autoload.php'; // Composer autoload\n\nuse App\\User;\n\n$user = new User();\necho $user->greet(); // \"Hello, user!\"\n?>",
                "code23": "class CalculatorTest extends PHPUnit\\Framework\\TestCase {  \n    public function testSum() {  \n        $calc = new Calculator();  \n        $this->assertEquals(4, $calc->sum(2, 2));  \n    }\n}",
                "code24": "class PaymentGateway {\n    public function charge($amount) {}\n}\n\nclass Order {\n    public function __construct(private PaymentGateway $gateway) {}\n    public function processOrder($amount) {\n        $this->gateway->charge($amount);\n        return \"Order processed\";\n    }\n}\n\nuse PHPUnit\\Framework\\TestCase;\n\nclass OrderTest extends TestCase {\n    public function testProcessOrder() {\n        $mock = $this->createMock(PaymentGateway::class);\n        $mock->expects($this->once())->method('charge')->with(100);\n        $this->assertEquals(\"Order processed\", (new Order($mock))->processOrder(100));\n    }\n}",
                "code25": "{\n    \"require\": {\n        \"php\": \"^8.0\"  // Specifies that PHP 8.0 or higher is required\n    }\n}",
                "code26": "# CHANGELOG\n\n## [1.1.0] - 2024-10-15\n### Added\n- New method `calculateArea()` in `Circle.php` to calculate the area of the circle.\n\n### Changed\n- Updated dependencies in `composer.json`.\n\n### Fixed\n- Fixed a bug in `processOrder()` method in `Order.php` that caused failures.\n\n## [1.0.0] - 2024-09-30\n### Added\n- Initial functionality to create a circle with a center and radius in `Circle.php`.",
                "code27": "$hash = password_hash($password, PASSWORD_BCRYPT);",
                "code28": "<?php\n// Database connection using PDO\n$pdo = new PDO('mysql:host=localhost;dbname=test', 'username', 'password');\n\n// Sanitize and validate user input\n$username = filter_var($_POST['username'], FILTER_SANITIZE_STRING);\n\n// Use a prepared statement to prevent SQL injections\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->bindParam(':username', $username);\n$stmt->execute();\n\n// Display results, sanitizing output to prevent XSS\nforeach ($stmt as $user) {\n    echo htmlspecialchars($user['username']);\n}\n?>",
                "code29": "declare(strict_types=1);\n\nfunction add(int $a, int $b): int {\n    return $a + $b;\n}\n\necho add(2, 3); // Works\n// echo add(2, '3'); // Would throw an error because '3' is a string",
                "code30": "<?php\ndeclare(strict_types=1); // Enable strict typing\n\nfunction add(int $a, int $b): int {\n    return $a + $b;\n}\n\n$result = add(2, 3); // Correct\necho $result;\n\n// This will throw a TypeError due to strict typing\n// $result = add(2.5, 3.0); // Uncomment to see the error\n?>",
                "code31": "namespace MyProject\\Models;\n\nclass User {\n    public function getName() {\n        return \"Juan\";\n    }\n}\n\n$user = new \\MyProject\\Models\\User();\necho $user->getName();",
                "code32": "<?php\n// Define a namespace\nnamespace MyApp\\Models;\n\nclass User {\n    public function __construct() {\n        echo \"User model loaded.\";\n    }\n}\n\n// Using the class\n$user = new User(); // Can be used directly thanks to the namespace\n?>"
            },
            {
                "id": "971CFDDD-2AFA-418F-909F-D459CC6827CF",
                "name": "TypeScript",
                "miniDescription": "JavaScript with optional static typing.",
                "restrictions": ["I"],
                "ask1": "Leverage the type system",
                "ask2": "Proper use of any",
                "ask3": "Use enum for constant values",
                "ask4": "Code modularization",
                "ask5": "Write asynchronous code with async/await",
                "ask6": "Proper use of classes and inheritance",
                "ask7": "Avoid excessive use of type coercion",
                "ask8": "Proper handling of null and undefined",
                "ask9": "Interfaces vs. types",
                "ask10": "Keep the code clean and readable",
                "ask11": "Use generics to enhance reusability",
                "ask12": "Implement flow control with type discrimination",
                "ask13": "Proper tsconfig.json configuration",
                "ask14": "Write unit tests",
                "ask15": "Proper use of readonly and const",
                "ask16": "Utilize type inference when necessary",
                "q1": "Define types explicitly:\nLeverage TypeScript's type system to define clear and specific types. This helps catch errors at compile time rather than runtime.",
                "q2": "Use interface and type for complex structures:\nDefine interfaces or types to describe the shape of objects and other complex data types.",
                "q3": "Avoid excessive use of any:\nAvoid using any whenever possible, as it disables type checking and negates one of TypeScript's main advantages.",
                "q4":"Prefer more specific types over any:\nWhen using any, you lose the ability to take advantage of TypeScript features, such as autocompletion and type checking. By defining more specific types, you enhance code quality and facilitate maintenance, as other developers can better understand the intention behind each variable.",
                "q5": "Enums:\nEnums allow you to define a set of named constant values. This improves code readability and compile-time safety.",
                "q6":"Enums to represent states or categories:\nBy using enums, you can semantically represent states or categories, making the code more intuitive. This not only improves readability but also reduces the risk of errors by using constant values that are easily identifiable.",
                "q7": "Import and export modules:\nSplit your code into reusable and maintainable modules. Use import and export keywords to share functions, classes, or constants across files.",
                "q8":"Separate responsibilities into modules:\nModularization helps keep the code focused and clear, allowing each module to have a single responsibility. This makes it easier to debug and test specific parts of the code without affecting the rest of the application.",
                "q9": "Async/await:\nUse async and await to handle asynchronous operations in a more readable way and avoid excessive nested promises.",
                "q10": "Handle asynchronous errors:\nAlways wrap asynchronous operations in try/catch blocks to capture and handle errors.",
                "q11": "Classes and inheritance:\nTypeScript offers full support for object-oriented programming. Use classes to create reusable structures and apply principles like inheritance and encapsulation.",
                "q12":"Polymorphism to implement different behaviors:\nInheritance allows child classes to implement their own versions of methods defined in the parent class. This is known as polymorphism, and it enables the code to be more flexible and scalable by being able to work uniformly with different types of objects.",
                "q13": "Safe types:\nAvoid forced type conversion (coercion).\nIf you need to change a type, use the appropriate methods and tools to ensure safe conversion.",
                "q14":"Consistency in types:\nType coercion can lead to unexpected errors and make the code harder to understand. It’s better to maintain consistency in types and avoid excessive type conversion. Use type assertions only when necessary and with caution.",
                "q15": "Handle null values:\nUse the ! and ? operators to properly manage null or undefined values and avoid reference errors.",
                "q16":"Default values to avoid null and undefined:\nBy assigning default values in functions or object destructuring, you can ensure that a valid value is always provided, thereby avoiding issues related to null or undefined.",
                "q17": "Interfaces:\nUse interfaces to describe the shape of an object, especially in cases where you expect it to be extended or implemented by classes.",
                "q18": "Type:\nUse type when defining complex types like unions, intersections, or aliases.",
                "q19": "Linting and formatting:\nUse tools like TSLint or ESLint along with Prettier to ensure your code follows consistent style and best practices.",
                "q20": "Proper naming:\nUse descriptive and meaningful names for variables, functions, and classes. This improves code comprehension.",
                "q21": "Generic types:\nUse generics to create functions and classes that can work with different types while maintaining type safety.",
                "q22":"Generics in interfaces and types:\nBy defining interfaces and types with generics, you can create more flexible data structures that can adapt to different types without losing type information. This is useful for collections and complex structures.",
                "q23": "Type guards:\nUse type guards to handle objects of different types correctly and avoid runtime errors.",
                "q24":"Type discrimination to handle different structures:\nUse type discrimination to create clearer and safer control flow in your code. This allows you to manage different types of objects through a common property that acts as a “discriminator.”",
                "q25": "Compilation settings:\nProperly configure the tsconfig.json file to control aspects like strict type checking (strict: true), support for ES6 or later, and input/output directories for compiled files.",
                "q26":"Advanced configurations for large projects:\nIn large projects, you can use tsconfig.json to split the configuration into multiple files and enable project references. This enhances the modularity and scalability of the code.",
                "q27": "Unit testing with TypeScript:\nWrite unit tests using tools like Jest or Mocha. Combining unit testing with TypeScript’s type system ensures your code works properly and is easy to maintain.",
                "q28":"Selecting an appropriate testing framework:\nUse a testing framework like Jest or Mocha to structure and run your unit tests. These frameworks offer advanced features like function mocking and asynchronous test execution.",
                "q29": "Immutability:\nUse the readonly keyword to ensure data is not modified after assignment, especially in objects and arrays.",
                "q30":"Distinguishing between readonly and const:\nUse readonly for object properties that should not be modified after initialization, and const to declare variables that should not be reassigned. This enhances immutability and code clarity.",
                "q31": "Type inference:\nTypeScript can infer types in many cases, so it’s not always necessary to explicitly specify the type. Let the compiler handle it when types are obvious.",
                "q32":"Type inference in complex structures:\nTypeScript also infers types in objects and arrays based on their initial values, making it easier to create data structures without needing explicit annotations.",
                "code1": "let age: number = 30;\nlet name: string = \"Juan\";\nlet isActive: boolean = true;",
                "code2": "interface User { id: number; name: string; }\ntype Product = { id: number; price: number; };\ntype Order = { user: User; products: Product[]; total: () => number; };\n\nconst order: Order = {\n    user: { id: 1, name: \"John Doe\" },\n    products: [{ id: 1, price: 1200 }, { id: 2, price: 25 }],\n    total() { return this.products.reduce((sum, p) => sum + p.price, 0); },\n};\n\nconsole.log(`Total: $${order.total()}`);",
                "code3": "// Avoid this:\nlet data: any = \"text\";\n\n// Better, specify the type:\nlet text: string = \"text\";",
                "code4": "// Use of any, not very informative\nlet user: any = { name: \\\"John\\\", age: 30 };\n\n// Better, specify the type\ninterface User {\n    name: string;\n    age: number;\n}\n\nlet user: User = { name: \\\"John\\\", age: 30 };",
                "code5": "enum Status {  \n    Active,  \n    Inactive,  \n    Pending  \n}\n\nlet currentStatus: Status = Status.Active;",
                "code6": "enum Direction {  \n    North,  \n    South,  \n    East,  \n    West\n}\n\nlet travelDirection: Direction = Direction.North;",
                "code7": "// file utilities.ts\nexport function greet(name: string): string {  \n    return `Hello, ${name}`;\n}\n\n// file app.ts\nimport { greet } from './utilities';\nconsole.log(greet(\"Juan\"));",
                "code8": "// logger.ts\nexport function logMessage(message: string): void {  \n    console.log(`Log: ${message}`);\n}\n\n// app.ts\\nimport { logMessage } from './logger';\nlogMessage(\\\"The application has started successfully.\\\");",
                "code9": "async function fetchData(): Promise<any> { \n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    return data;\n}",
                "code10": "async function getData(): Promise { \n    try {\n        const response = await fetch('https://api.example.com/data');\n        const data = await response.json();\n        console.log(data); \n    }\n    catch (error) { \n        console.error('Error fetching data', error); \n    }\n}",
                "code11": "class Person {  \n    protected name: string;\n  \n    constructor(name: string) {  \n        this.name = name;  \n    }\n\n    greet(): void {  \n        console.log(`Hello, I am ${this.name}`);  \n    }\n}\n\nclass Employee extends Person {  \n    private salary: number;\n  \n    constructor(name: string, salary: number) {  \n        super(name);  \n        this.salary = salary;  \n    }\n  \n    showSalary(): void {  \n        console.log(`Salary: ${this.salary}`);  \n    }\n}",
                "code12": "// Parent class\\nclass Person {\n    constructor(public name: string) {}\n}\n\n// Child class\nclass Student extends Person {\n    study(): void {\n        console.log(`${this.name} is studying.`);\n    }\n}\n\n// Usage\nconst student = new Student(\\\"Ana\\\");\nstudent.study(); // Ana is studying.",
                "code13": "let value: unknown = \"123\";\n\n// Use casting to safely convert:\nlet number: number = (value as string).length;",
                "code14": "let value: any = \\\"123\\\";\n\n// Avoid this:\nlet number: number = <number>value; // Type coercion\n\n// Better, ensure the type is correct:\nif (typeof value === \\\"string\\\") {\n    let number: number = parseInt(value); // Explicit conversion\n}",
                "code15": "let name: string | null = getName();\n\n// Nullish coalescing operator:\nlet validName: string = name ?? \"Unknown\";\n\n// Optional chaining:\nlet nameLength = name?.length;",
                "code16": "function greet(name: string | null = \\\"Guest\\\"): string {\n    return \\`Hello, \\${name}!\\`;\n}\n\\nconsole.log(greet());            // Hello, Guest!\nconsole.log(greet(\\\"Juan\\\"));      // Hello, Juan!\nconsole.log(greet(null));        // Hello, Guest!",
                "code17": "interface Person {  \n    name: string;  \n    age: number;\n}\n\nclass Employee implements Person {  \n    name: string;  \n    age: number;  \n    salary: number;\n\n    constructor(name: string, age: number, salary: number) {  \n        this.name = name;  \n        this.age = age;  \n        this.salary = salary;  \n    }\n}",
                "code18": "type ID = string | number;\n\nlet identifier: ID = \"123\";",
                "code19": "# Install dependencies\nnpm install --save-dev eslint prettier @typescript-eslint/parser @typescript-eslint/eslint-plugin\n\n# ESLint configuration\necho '{\"parser\":\"@typescript-eslint/parser\",\"extends\":[\"eslint:recommended\",\"plugin:@typescript-eslint/recommended\",\"plugin:prettier/recommended\"]}' > .eslintrc.json\n\n# Prettier configuration\necho '{\"singleQuote\":true,\"semi\":false}' > .prettierrc\n\n# Sample TypeScript file\necho 'const add=(a,b)=>a+b;console.log(add(2,3));' > index.ts\n\n# Run ESLint and Prettier\nnpx eslint index.ts && npx prettier --write index.ts",
                "code20": "// Instead of:\nlet x = getData();\n\n// Use clear names:\nlet userData = getUserData();",
                "code21": "function identity<T>(value: T): T { \n    return value;\n}\n\nlet numberIdentity = identity(10);\nlet textIdentity = identity(\"text\");",
                "code22": "interface APIResponse<T> {\n    data: T;\n    error: boolean;\n}\n\nconst numberResponse: APIResponse<number> = {\n    data: 42,\n    error: false\n};\n\nconst textResponse: APIResponse<string> = {\n    data: \"Success\",\n    error: false\n};\n\nconsole.log(numberResponse); // { data: 42, error: false }\nconsole.log(textResponse);    // { data: \"Success\", error: false }",
                "code23": "function printID(id: string | number): void {  \n    if (typeof id === \"string\") {  \n        console.log(`The ID is a string: ${id}`);  \n    } else {  \n        console.log(`The ID is a number: ${id}`);  \n    }\n}",
                "code24": "type Shape = \n    | { type: \"circle\"; radius: number }\n    | { type: \"square\"; side: number };\n\nfunction calculateArea(shape: Shape): number {\n    switch (shape.type) {\n        case \"circle\":\n            return Math.PI * shape.radius ** 2;\n        case \"square\":\n            return shape.side ** 2;\n    }\n}\n\nconst circle: Shape = { type: \"circle\", radius: 5 };\nconst square: Shape = { type: \"square\", side: 4 };\n\nconsole.log(calculateArea(circle));  // 78.53981633974483\nconsole.log(calculateArea(square));   // 16",
                "code25": "{\n    \"compilerOptions\": {  \n      \"target\": \"ES6\",  \n      \"module\": \"commonjs\",  \n      \"strict\": true,  \n      \"outDir\": \"./dist\",  \n      \"esModuleInterop\": true\n\t}\n}",
                "code26": "// tsconfig.json at the root of the project\n{\n    \"files\": [],\n    \"references\": [\n        { \"path\": \"./package1/tsconfig.json\" },\n        { \"path\": \"./package2/tsconfig.json\" }\n    ]\n}\n\n// tsconfig.json in the package1 directory\n{\n    \"compilerOptions\": {\n        \"composite\": true,\n        \"outDir\": \"../dist/package1\"\n    },\n    \"include\": [\"**/*.ts\"]\n}\n\n// tsconfig.json in the package2 directory\n{\n    \"compilerOptions\": {\n        \"composite\": true,\n        \"outDir\": \"../dist/package2\"\n    },\n    \"include\": [\"**/*.ts\"]\n}",
                "code27": "test('Correct sum', () => {  \n    expect(sumar(1, 2)).toBe(3);\n});",
                "code28": "// Example using Jest\nfunction sum(a: number, b: number): number {\n    return a + b;\n}\n\ntest('sum of 1 and 2 should be 3', () => {\n    expect(sum(1, 2)).toBe(3);\n});",
                "code29": "interface Point {  \n    readonly x: number;  \n    readonly y: number;\n}\n\nconst point: Point = { x: 10, y: 20 };  \n// point.x = 5; // Error: Cannot modify a readonly value",
                "code30": "class User {\n    readonly name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nconst user = new User(\"Juan\");\n// user.name = \"Pedro\"; // Error: Cannot assign to 'name' because it is a readonly property\n\nconst age = 30;\n// age = 31; // Error: Cannot assign to 'age' because it is a constant or a read-only property",
                "code31": "// TypeScript will infer that `number` is of type `number`\nlet number = 10;",
                "code32": "const user = {\n    name: \"Ana\",\n    age: 28,\n    active: true\n}; // TypeScript infers that user is of type { name: string; age: number; active: boolean; }\n\nconst numbers = [1, 2, 3, 4, 5]; // TypeScript infers that numbers is of type number[]\n\nconsole.log(user.name);   // Ana\nconsole.log(numbers[0]);   // 1"
            }
		]
	},
	{
		"name": "Domain-Specific Languages",
        "id": "CE3C67F9-79E3-46E3-B134-362A52ABFE3C",
		"items": [
			{
                "id": "A4D89AF9-190E-4409-B924-AABD13DBB6A4",
				"name": "Swift",
                "miniDescription": "Developed for fast iOS/macOS apps.",
				"restrictions": ["E", "I"],
                "ask1": "Clear code structure",
                "ask2": "Performance optimization",
                "ask3": "Modularity and reusability",
                "ask4": "Type efficiency and safety",
                "ask5": "Proper error handling",
                "ask6": "Readable and maintainable code",
                "ask7": "Testing and debugging",
                "ask8": "Use of extensions and categories",
                "ask9": "Memory and resource optimization",
                "ask10": "Design patterns",
                "ask11": "Concurrency",
                "ask12": "Follow official guidelines",
                "ask13": "Proper use of structures and classes",
                "ask14": "Encapsulation and controlled access",
                "ask15": "Use of guard to avoid nesting",
                "ask16": "Avoid using complex logic inside closures",
                "q1": "Meaningful naming:\nUse descriptive names for variables, functions, and classes. This facilitates code readability and understanding.",
                "q2": "Proper spacing and indentation:\nMaintain consistent indentation (usually 4 spaces) and logically group the code.",
                "q3": "Use let and var properly:\nDeclare variables with let if they don't change, and with var if they might.\nThis helps optimize memory.",
                "q4": "Avoid strong captures in closures:\nUse [weak self] or [unowned self] in closures to avoid reference cycles that can cause memory leaks.",
                "q5": "Follow the DRY (Don’t Repeat Yourself) principle:\nAvoid duplicating code by creating reusable functions and separating logic into different modules or classes.",
                "q6": "Use Protocols:\nSwift protocols allow defining interfaces and promote code reuse and interface-oriented programming.",
                "q7": "Leverage Swift's type system:\nSwift is strongly typed, so using safe types like Optionals and Generics prevents errors and enhances robustness.",
                "q8": "Handle Optionals:\nUse if let, guard let, or the ?? operator to safely unwrap Optionals, preventing potential crashes.",
                "q9": "Error handling with do-catch:\nSwift provides a robust error handling system. Use throws and do-catch to manage errors clearly and efficiently.",
                "q10": "Validation and preconditions:\nUse assert or precondition to validate critical assumptions that could affect program execution.",
                "q11": "Comments and documentation:\nWrite clear comments when the code may be difficult to understand. Use /// for documenting functions and classes.",
                "q12": "Clean code:\nRemove dead or unused code, avoid unnecessary comments, and follow style conventions like those recommended by Apple.",
                "q13": "Unit testing:\nUse unit tests to verify your code works correctly and to ensure changes don’t introduce errors.",
                "q14": "Efficient debugging:\nUse Xcode’s debugging tools, such as breakpoints and logging, to quickly identify and fix errors.",
                "q15": "Extensions:\nUse extensions to add functionality to existing types without modifying their original implementation, keeping the code modular and clean.",
                "q16": "Avoid Unnecessary Repetition:\nUse extensions to encapsulate computations that might be expensive and don’t need to be performed repeatedly. Storing the result in a computed property instead of recalculating it every time can improve performance.",
                "q17": "ARC (Automatic Reference Counting):\nARC automatically manages memory by releasing objects when they’re no longer needed. Strong references are the default and keep objects alive as long as there are references to them. However, this can cause reference cycles if two objects reference each other, which leads to memory leaks.",
                "q18": "Lazy properties:\nUse lazy properties when a value is not immediately needed to improve program efficiency.",
                "q19": "Follow SOLID principles:\nApply object-oriented design principles to ensure your code is easy to maintain and scale.",
                "q20": "Use design patterns like Singleton, MVC, and MVVM:\nThese patterns help organize the code and make it more flexible and maintainable.",
                "q21": "GCD (Grand Central Dispatch) and Operation Queues:\nTake advantage of Swift’s concurrency capabilities using GCD to run background tasks and improve application performance.",
                "q22": "Async/await:\nFrom Swift 5.5, you can use async and await to handle asynchronous code in a more clear and structured way.",
                "q23": "Swift API Design Guidelines:\nFollowing Swift’s official naming and style guidelines ensures your code aligns with the language’s best practices.",
                "q24": "Implement Protocol Conformance in Extensions:\nWhen conforming a type to a protocol, it is recommended to use extensions to group all the methods and properties required by that protocol. This improves code organization and readability, aligning with Swift’s guidelines.",
                "q25": "Choose between struct and class wisely:\nUse struct for types that don't need inheritance and should be copied when passed between functions, and class when you need inheritance or want to manage references.",
                "q26": "Immutability in struct:\nStructs are immutable if declared as constants, improving code safety.",
                "q27": "Control access with access modifiers:\nUse access modifiers (private, fileprivate, internal, public, open) to encapsulate data and ensure properties or methods are only accessible from where they should be.",
                "q28": "Avoid excessive use of public:\nLimit the visibility of variables and methods to prevent unnecessary exposure.",
                "q29": "Use guard to exit early:\nEmploy guard to avoid excessive nesting and clarify the conditions under which a function should continue executing.",
                "q30": "Greater clarity in conditions:\n'guard' makes error conditions or exceptions clear and easy to spot.",
                "q31": "Keep closures simple:\nClosures should be short and easy to understand. Avoid placing complex logic within them.",
                "q32": "Extract complex logic:\nIf you need to implement more complicated logic, it's better to extract it into a separate function.",
                "code1": "func calculateRectangleArea(width: Double, height: Double) -> Double {\n    return width * height\n}\n\nlet rectangleWidth = 5.0\nlet rectangleHeight = 10.0\nlet area = calculateRectangleArea(width: rectangleWidth, height: rectangleHeight)\nprint(\"The area is \\(area)\")",
                "code2": "class Book {\n    var title: String\n    var author: String\n\n    init(title: String, author: String) {\n        self.title = title\n        self.author = author\n    }\n\n    func display() {\n        print(\"\\(title) by \\(author)\")\n    }\n}\n\nlet book = Book(title: \"1984\", author: \"Orwell\")\nbook.display()  // Output: 1984 by Orwell",
                "code3": "let constant = 10 // Does not change\nvar variable = 20 // Can change\nvariable = 30",
                "code4": "class MyClass {\n    var name: String = \"Class\"\n    \n    func exampleOfClosure() {\n        // Avoids retain cycles using [weak self]\n        DispatchQueue.global().async { [weak self] in\n            guard let self = self else { return }\n            print(\"The name is \\(self.name)\")\n        }\n    }\n}",
                "code5": "func printGreeting(name: String) {\n    print(\"Hello, \\(name)\")\n}\n\nprintGreeting(name: \"John\")\nprintGreeting(name: \"Mary\")",
                "code6": "protocol Describable {\n    func description() -> String\n}\n\nclass Person: Describable {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n    \n    func description() -> String {\n        return \"Person named \\(name)\"\n    }\n}\n\nlet person = Person(name: \"John\")\nprint(person.description())",
                "code7": "let possibleNumber: Int? = Int(\"123\")\nif let number = possibleNumber {\n    print(\"The number is \\(number)\")\n} else {\n    print(\"It is not a valid number\")\n}",
                "code8": "// Function that displays a message with an optional name\nfunc showName(_ name: String?) {\n    // Using 'if let' to unwrap the optional\n    if let unwrappedName = name {\n        print(\"Hello, \\(unwrappedName)!\")\n    } else {\n        print(\"Hello, guest!\")\n    }\n}\n\nlet name: String? = nil\nshowName(name)  // Output: Hello, guest!",
                "code9": "enum DivisionError: Error {\n    case divisionByZero\n}\n\nfunc divide(_ a: Double, _ b: Double) throws -> Double {\n    if b == 0 {\n        throw DivisionError.divisionByZero\n    }\n    return a / b\n}\n\ndo {\n    let result = try divide(10, 0)\n    print(result)\n} catch {\n    print(\"Error: \\(error)\")\n}",
                "code10": "let number = 5\nprecondition(number > 0, \"The number must be greater than 0\")\nprint(\"Valid number\")",
                "code11": "/// Adds two integers and returns the result.\n/// - Parameters:\n///   - a: First integer.\n///   - b: Second integer.\n/// - Returns: The sum of `a` and `b`.\nfunc sum(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nlet sum = sum(2, 3)\nprint(\"The sum is \\(sum)\")",
                "code12": "// Without cleanup\nclass Car {\n    var brand: String\n    var color: String = \"Unknown\"  // Unused\n    init(brand: String) { self.brand = brand }\n    func fullDescription() -> String { return brand }\n}\n\n// ---\n\n// Cleaned up\nclass Car {\n    var brand: String\n    init(brand: String) { self.brand = brand }\n    func description() -> String { return brand }\n}",
                "code13": "import XCTest\n\nclass SumTests: XCTestCase {\n    func testSum() {\n        let result = sum(2, 3)\n        XCTAssertEqual(result, 5)\n    }\n}",
                "code14": "let result = sum(2, 3)\nprint(\"Result of the sum: \\(result)\") // Use of logging",
                "code15": "extension String {\n    func isPalindrome() -> Bool {\n        return self == String(self.reversed())\n    }\n}\n\nprint(\"radar\".isPalindrome()) // true",
                "code16": "extension Array where Element: Numeric {\n    // Computed property that stores the total only once\n    var total: Element {\n        return self.reduce(0, +)\n    }\n    \n    // Method to get the average, using the total property\n    var average: Element? {\n        guard !self.isEmpty else { return nil }\n        return total / Element(self.count)\n    }\n}\n\nlet numbers = [1, 2, 3, 4, 5]\nprint(\"Total: \\(numbers.total)\") // Output: Total: 15\nif let average = numbers.average {\n    print(\"Average: \\(average)\") // Output: Average: 3\n}",
                "code17": "class Person {\n    var name: String\n    weak var apartment: Apartment?\n\n    init(name: String) { self.name = name }\n}\n\nclass Apartment {\n    var tenant: Person?\n}\n\n// Create instances\nvar john: Person? = Person(name: \"John\")\nvar apt: Apartment? = Apartment()\n\njohn?.apartment = apt\napt?.tenant = john\n\n// Clear references\njohn = nil\napt = nil",
                "code18": "class DataLoader {\n    lazy var data: [String] = {\n        print(\"Loading data...\")\n        return [\"data1\", \"data2\", \"data3\"]\n    }()\n}\n\nlet loader = DataLoader()\nprint(\"Before accessing the data\")\nprint(loader.data)  // \"Loading data...\" will be printed only when accessing `data`",
                "code19": "protocol UserDataStorage {\n    func save(name: String)\n}\n\nclass DatabaseStorage: UserDataStorage {\n    func save(name: String) {\n        print(\"User \\(name) saved.\")\n    }\n}\n\n// Usage\nDatabaseStorage().save(name: \"Alice\")",
                "code20": "class Singleton {\n    static let instance = Singleton()\n    private init() {}\n    \n    func doSomething() {\n        print(\"Doing something...\")\n    }\n}\n\nSingleton.instance.doSomething()",
                "code21": "func asynchronousTask() async -> String {\n    return \"Task completed\"\n}\n\nTask {\n    let result = await asynchronousTask()\n    print(result)\n}",
                "code22": "func fetchData() async -> String {\n    // Simulate an asynchronous task\n    return \"Data fetched\"\n}\n\nfunc displayData() async {\n    let data = await fetchData()\n    print(data)\n}\n\n// Usage\nTask {\n    await displayData()  // Call the asynchronous function\n}",
                "code23": "// Clear names, use of verbs for functions, appropriate typing\nfunc sendMessage(to recipient: String, with content: String) {\n    print(\"Sending message to \\(recipient): \\(content)\")\n}\n\nsendMessage(to: \"Juan\", with: \"Hello, how are you?\")",
                "code24": "protocol Identifiable {\n    var id: String { get }\n}\n\nclass Product {\n    var name: String\n    init(name: String) { self.name = name }\n}\n\n// Extension to conform to Identifiable\nextension Product: Identifiable {\n    var id: String { return UUID().uuidString }\n}\n\nlet product = Product(name: \"Tablet\")\nprint(\"ID: \\(product.id)\") // Output: ID: <uuid>",
                "code25": "struct Point {\n    var x: Double\n    var y: Double\n}\n\nclass Circle {\n    var radius: Double\n    init(radius: Double) {\n        self.radius = radius\n    }\n}\n\nlet point1 = Point(x: 0, y: 0)\nvar circle1 = Circle(radius: 10)",
                "code26": "struct Point {\n    var x: Int\n    var y: Int\n}\n\n// Declare a point as a constant\nlet point = Point(x: 10, y: 20)\n\n// point.x = 30  // This will cause a compilation error\n\nprint(\"Point: (\\(point.x), \\(point.y))\")  // Point: (10, 20)",
                "code27": "class BankAccount {\n    private var balance: Double = 0.0\n    \n    func deposit(amount: Double) {\n        balance += amount\n    }\n    \n    func getBalance() -> Double {\n        return balance\n    }\n}",
                "code28": "class Counter {\n    private var count: Int = 0  // Using 'private' to limit access\n\n    func increment() {\n        count += 1\n    }\n\n    func getCount() -> Int {\n        return count\n    }\n}\n\n// Usage\nlet counter = Counter()\ncounter.increment()\nprint(counter.getCount())  // 1\n\n// counter.count  // This will cause a compilation error",
                "code29": "func processUser(user: String?) {\n    guard let user = user else {\n        print(\"Invalid user\")\n        return\n    }\n    print(\"Processing \\(user)\")\n}",
                "code30": "func divide(_ numerator: Int, _ denominator: Int) -> Int? {\n    guard denominator != 0 else {\n        print(\"Error: The denominator cannot be zero.\")\n        return nil\n    }\n    return numerator / denominator\n}\n\n// Usage\nif let result = divide(10, 2) {\n    print(\"Result: \\(result)\")  // Result: 5\n}\n\ndivide(10, 0)  // Error: The denominator cannot be zero.",
                "code31": "let numbers = [1, 2, 3, 4, 5]\n\n// Simple use of closure\nlet evenNumbers = numbers.filter { $0 % 2 == 0 }\nprint(evenNumbers) // [2, 4]",
                "code32": "func calculateTax(price: Double, rate: Double) -> Double {\n    return price * rate\n}\n\nfunc finalPrice(price: Double, rate: Double) -> Double {\n    let tax = calculateTax(price: price, rate: rate)\n    return price + tax\n}\n\n// Usage\nlet total = finalPrice(price: 100, rate: 0.21)\nprint(\"Final price: \\(total)\")  // Final price: 121.0"
			}
		]
	}
]
